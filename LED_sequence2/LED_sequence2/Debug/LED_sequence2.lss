
LED_sequence2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000060c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000680  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000680  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000115e  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000811  00000000  00000000  00001942  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ada  00000000  00000000  00002153  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00002c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000594  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000937  00000000  00000000  00003370  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003ca7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 99 00 	call	0x132	; 0x132 <main>
  74:	0c 94 04 03 	jmp	0x608	; 0x608 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_initModules>:
LED_off(LED_3_PORT, LED_3_PIN);
}

void APP_ledUnitTesting (void)
{
LED_on(LED_1_PORT,LED_1_PIN);
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	62 e0       	ldi	r22, 0x02	; 2
  80:	84 e4       	ldi	r24, 0x44	; 68
  82:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_init>
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	62 e0       	ldi	r22, 0x02	; 2
  8a:	84 e4       	ldi	r24, 0x44	; 68
  8c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <DIO_write>
  90:	60 e0       	ldi	r22, 0x00	; 0
  92:	81 e4       	ldi	r24, 0x41	; 65
  94:	0e 94 72 00 	call	0xe4	; 0xe4 <LED_init>
  98:	61 e0       	ldi	r22, 0x01	; 1
  9a:	81 e4       	ldi	r24, 0x41	; 65
  9c:	0e 94 72 00 	call	0xe4	; 0xe4 <LED_init>
  a0:	62 e0       	ldi	r22, 0x02	; 2
  a2:	81 e4       	ldi	r24, 0x41	; 65
  a4:	0e 94 72 00 	call	0xe4	; 0xe4 <LED_init>
  a8:	63 e0       	ldi	r22, 0x03	; 3
  aa:	81 e4       	ldi	r24, 0x41	; 65
  ac:	0e 94 72 00 	call	0xe4	; 0xe4 <LED_init>
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	81 e4       	ldi	r24, 0x41	; 65
  b4:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	81 e4       	ldi	r24, 0x41	; 65
  bc:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
  c0:	62 e0       	ldi	r22, 0x02	; 2
  c2:	81 e4       	ldi	r24, 0x41	; 65
  c4:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
  c8:	63 e0       	ldi	r22, 0x03	; 3
  ca:	81 e4       	ldi	r24, 0x41	; 65
  cc:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
  d0:	08 95       	ret

000000d2 <APP_ledSequenceV2>:
}

void APP_ledSequenceV2 (void)
  {
sei();
  d2:	78 94       	sei

EXT_INT_TriggerEdge(EX_INT0,RISING_EDGE);
  d4:	63 e0       	ldi	r22, 0x03	; 3
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	0e 94 8e 02 	call	0x51c	; 0x51c <EXT_INT_TriggerEdge>
EXT_INT_Enable(EX_INT0);
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	0e 94 74 02 	call	0x4e8	; 0x4e8 <EXT_INT_Enable>
  e2:	08 95       	ret

000000e4 <LED_init>:

#include "LED.h"
EN_ledError_t LED_init(uint8_t ledPort,uint8_t ledPin)
{
	EN_ledError_t error = LED_OK;
	if (ledPort > PORT_D)
  e4:	85 34       	cpi	r24, 0x45	; 69
  e6:	38 f4       	brcc	.+14     	; 0xf6 <LED_init+0x12>
	{
		error = WRONG_PORT_LED;
	}
	else if (ledPin > 7)
  e8:	68 30       	cpi	r22, 0x08	; 8
  ea:	38 f4       	brcc	.+14     	; 0xfa <LED_init+0x16>
	{
		error = WRONG_PIN_LED;
	}
	else
	{
		DIO_init(ledPort, ledPin, OUTPUT);
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	0e 94 5e 01 	call	0x2bc	; 0x2bc <DIO_init>
		error = LED_OK;
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	08 95       	ret
EN_ledError_t LED_init(uint8_t ledPort,uint8_t ledPin)
{
	EN_ledError_t error = LED_OK;
	if (ledPort > PORT_D)
	{
		error = WRONG_PORT_LED;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	08 95       	ret
	}
	else if (ledPin > 7)
	{
		error = WRONG_PIN_LED;
  fa:	82 e0       	ldi	r24, 0x02	; 2
		DIO_init(ledPort, ledPin, OUTPUT);
		error = LED_OK;
	}
	
	return error;
}
  fc:	08 95       	ret

000000fe <LED_on>:

EN_ledError_t LED_on(uint8_t ledPort,uint8_t ledPin)
{
EN_ledError_t error = LED_OK;
if (ledPort > PORT_D)
  fe:	85 34       	cpi	r24, 0x45	; 69
 100:	38 f4       	brcc	.+14     	; 0x110 <LED_on+0x12>
{
	error = WRONG_PORT_LED;
}
else if (ledPin > 7)
 102:	68 30       	cpi	r22, 0x08	; 8
 104:	38 f4       	brcc	.+14     	; 0x114 <LED_on+0x16>
{
	error = WRONG_PIN_LED;
}
else
{
	DIO_write(ledPort,ledPin,HIGH);
 106:	41 e0       	ldi	r20, 0x01	; 1
 108:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <DIO_write>
	error = LED_OK;
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	08 95       	ret
EN_ledError_t LED_on(uint8_t ledPort,uint8_t ledPin)
{
EN_ledError_t error = LED_OK;
if (ledPort > PORT_D)
{
	error = WRONG_PORT_LED;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	08 95       	ret
}
else if (ledPin > 7)
{
	error = WRONG_PIN_LED;
 114:	82 e0       	ldi	r24, 0x02	; 2
	DIO_write(ledPort,ledPin,HIGH);
	error = LED_OK;
}

return error;
}
 116:	08 95       	ret

00000118 <LED_off>:

EN_ledError_t LED_off(uint8_t ledPort,uint8_t ledPin)
{
EN_ledError_t error = LED_OK;
if (ledPort > PORT_D)
 118:	85 34       	cpi	r24, 0x45	; 69
 11a:	38 f4       	brcc	.+14     	; 0x12a <LED_off+0x12>
{
	error = WRONG_PORT_LED;
}
else if (ledPin > 7)
 11c:	68 30       	cpi	r22, 0x08	; 8
 11e:	38 f4       	brcc	.+14     	; 0x12e <LED_off+0x16>
{
	error = WRONG_PIN_LED;
}
else
{
	DIO_write(ledPort,ledPin,LOW);
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <DIO_write>
	error = LED_OK;
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret
EN_ledError_t LED_off(uint8_t ledPort,uint8_t ledPin)
{
EN_ledError_t error = LED_OK;
if (ledPort > PORT_D)
{
	error = WRONG_PORT_LED;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	08 95       	ret
}
else if (ledPin > 7)
{
	error = WRONG_PIN_LED;
 12e:	82 e0       	ldi	r24, 0x02	; 2
	DIO_write(ledPort,ledPin,LOW);
	error = LED_OK;
}

return error;
}
 130:	08 95       	ret

00000132 <main>:
#include "APPLICATION/APP.h"

 uint8_t  FLAG=0;
int main(void)
{
		APP_initModules();
 132:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_initModules>
		APP_ledSequenceV2();
 136:	0e 94 69 00 	call	0xd2	; 0xd2 <APP_ledSequenceV2>
 13a:	ff cf       	rjmp	.-2      	; 0x13a <main+0x8>

0000013c <__vector_1>:
    {
	
    }
}
ISR(EXT_INT_0)
{ FLAG++;
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
 15e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(FLAG==1)
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	89 f4       	brne	.+34     	; 0x18e <__vector_1+0x52>
	{
		
		LED_on(LED_0_PORT, LED_0_PIN);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	81 e4       	ldi	r24, 0x41	; 65
 170:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
		LED_off(LED_1_PORT, LED_1_PIN);
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	81 e4       	ldi	r24, 0x41	; 65
 178:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
		LED_off(LED_2_PORT, LED_2_PIN);
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	81 e4       	ldi	r24, 0x41	; 65
 180:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
		LED_off(LED_3_PORT, LED_3_PIN);
 184:	63 e0       	ldi	r22, 0x03	; 3
 186:	81 e4       	ldi	r24, 0x41	; 65
 188:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
 18c:	86 c0       	rjmp	.+268    	; 0x29a <__vector_1+0x15e>
		
	}else if(FLAG==2)
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	89 f4       	brne	.+34     	; 0x1b4 <__vector_1+0x78>
	{
		LED_on(LED_0_PORT, LED_0_PIN);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	81 e4       	ldi	r24, 0x41	; 65
 196:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
		LED_on(LED_1_PORT, LED_1_PIN);
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	81 e4       	ldi	r24, 0x41	; 65
 19e:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
		LED_off(LED_2_PORT, LED_2_PIN);
 1a2:	62 e0       	ldi	r22, 0x02	; 2
 1a4:	81 e4       	ldi	r24, 0x41	; 65
 1a6:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
		LED_off(LED_3_PORT, LED_3_PIN);
 1aa:	63 e0       	ldi	r22, 0x03	; 3
 1ac:	81 e4       	ldi	r24, 0x41	; 65
 1ae:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
 1b2:	73 c0       	rjmp	.+230    	; 0x29a <__vector_1+0x15e>
	}else if(FLAG==3)
 1b4:	83 30       	cpi	r24, 0x03	; 3
 1b6:	89 f4       	brne	.+34     	; 0x1da <__vector_1+0x9e>
	{
		LED_on(LED_0_PORT, LED_0_PIN);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
		LED_on(LED_1_PORT, LED_1_PIN);
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	81 e4       	ldi	r24, 0x41	; 65
 1c4:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
		LED_on(LED_2_PORT, LED_2_PIN);
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	81 e4       	ldi	r24, 0x41	; 65
 1cc:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
		LED_off(LED_3_PORT, LED_3_PIN);
 1d0:	63 e0       	ldi	r22, 0x03	; 3
 1d2:	81 e4       	ldi	r24, 0x41	; 65
 1d4:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
 1d8:	60 c0       	rjmp	.+192    	; 0x29a <__vector_1+0x15e>
	
	}else if(FLAG==4)
 1da:	84 30       	cpi	r24, 0x04	; 4
 1dc:	89 f4       	brne	.+34     	; 0x200 <__vector_1+0xc4>
	{
		LED_on(LED_0_PORT, LED_0_PIN);
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	81 e4       	ldi	r24, 0x41	; 65
 1e2:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
		LED_on(LED_1_PORT, LED_1_PIN);
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	81 e4       	ldi	r24, 0x41	; 65
 1ea:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
		LED_on(LED_2_PORT, LED_2_PIN);
 1ee:	62 e0       	ldi	r22, 0x02	; 2
 1f0:	81 e4       	ldi	r24, 0x41	; 65
 1f2:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
		LED_on(LED_3_PORT, LED_3_PIN);
 1f6:	63 e0       	ldi	r22, 0x03	; 3
 1f8:	81 e4       	ldi	r24, 0x41	; 65
 1fa:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
 1fe:	4d c0       	rjmp	.+154    	; 0x29a <__vector_1+0x15e>
	}else if(FLAG==5)
 200:	85 30       	cpi	r24, 0x05	; 5
 202:	89 f4       	brne	.+34     	; 0x226 <__vector_1+0xea>
	{
		LED_off(LED_0_PORT, LED_0_PIN);
 204:	60 e0       	ldi	r22, 0x00	; 0
 206:	81 e4       	ldi	r24, 0x41	; 65
 208:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
		LED_on(LED_1_PORT, LED_1_PIN);
 20c:	61 e0       	ldi	r22, 0x01	; 1
 20e:	81 e4       	ldi	r24, 0x41	; 65
 210:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
		LED_on(LED_2_PORT, LED_2_PIN);
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	81 e4       	ldi	r24, 0x41	; 65
 218:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
		LED_on(LED_3_PORT, LED_3_PIN);
 21c:	63 e0       	ldi	r22, 0x03	; 3
 21e:	81 e4       	ldi	r24, 0x41	; 65
 220:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
 224:	3a c0       	rjmp	.+116    	; 0x29a <__vector_1+0x15e>
		
	}else if(FLAG==6)
 226:	86 30       	cpi	r24, 0x06	; 6
 228:	89 f4       	brne	.+34     	; 0x24c <__vector_1+0x110>
	{
		LED_off(LED_0_PORT, LED_0_PIN);
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	81 e4       	ldi	r24, 0x41	; 65
 22e:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
		LED_off(LED_1_PORT, LED_1_PIN);
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	81 e4       	ldi	r24, 0x41	; 65
 236:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
		LED_on(LED_2_PORT, LED_2_PIN);
 23a:	62 e0       	ldi	r22, 0x02	; 2
 23c:	81 e4       	ldi	r24, 0x41	; 65
 23e:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
		LED_on(LED_3_PORT, LED_3_PIN);
 242:	63 e0       	ldi	r22, 0x03	; 3
 244:	81 e4       	ldi	r24, 0x41	; 65
 246:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
 24a:	27 c0       	rjmp	.+78     	; 0x29a <__vector_1+0x15e>
		
	}else if(FLAG==7)
 24c:	87 30       	cpi	r24, 0x07	; 7
 24e:	89 f4       	brne	.+34     	; 0x272 <__vector_1+0x136>
	{
		LED_off(LED_0_PORT, LED_0_PIN);
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	81 e4       	ldi	r24, 0x41	; 65
 254:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
		LED_off(LED_1_PORT, LED_1_PIN);
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	81 e4       	ldi	r24, 0x41	; 65
 25c:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
		LED_off(LED_2_PORT, LED_2_PIN);
 260:	62 e0       	ldi	r22, 0x02	; 2
 262:	81 e4       	ldi	r24, 0x41	; 65
 264:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
		LED_on(LED_3_PORT, LED_3_PIN);
 268:	63 e0       	ldi	r22, 0x03	; 3
 26a:	81 e4       	ldi	r24, 0x41	; 65
 26c:	0e 94 7f 00 	call	0xfe	; 0xfe <LED_on>
 270:	14 c0       	rjmp	.+40     	; 0x29a <__vector_1+0x15e>
	}else if(FLAG==8)
 272:	88 30       	cpi	r24, 0x08	; 8
 274:	91 f4       	brne	.+36     	; 0x29a <__vector_1+0x15e>
	{
		LED_off(LED_0_PORT, LED_0_PIN);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	81 e4       	ldi	r24, 0x41	; 65
 27a:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
		LED_off(LED_1_PORT, LED_1_PIN);
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	81 e4       	ldi	r24, 0x41	; 65
 282:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
		LED_off(LED_2_PORT, LED_2_PIN);
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	81 e4       	ldi	r24, 0x41	; 65
 28a:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
		LED_off(LED_3_PORT, LED_3_PIN);
 28e:	63 e0       	ldi	r22, 0x03	; 3
 290:	81 e4       	ldi	r24, 0x41	; 65
 292:	0e 94 8c 00 	call	0x118	; 0x118 <LED_off>
		FLAG=0;
 296:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	
	
}
 29a:	ff 91       	pop	r31
 29c:	ef 91       	pop	r30
 29e:	bf 91       	pop	r27
 2a0:	af 91       	pop	r26
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	7f 91       	pop	r23
 2a8:	6f 91       	pop	r22
 2aa:	5f 91       	pop	r21
 2ac:	4f 91       	pop	r20
 2ae:	3f 91       	pop	r19
 2b0:	2f 91       	pop	r18
 2b2:	0f 90       	pop	r0
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	0f 90       	pop	r0
 2b8:	1f 90       	pop	r1
 2ba:	18 95       	reti

000002bc <DIO_init>:
#include "DIO_int.h"

EN_dioError_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	EN_dioError_t error = DIO_OK;
	if (pinNumber < 8)
 2bc:	68 30       	cpi	r22, 0x08	; 8
 2be:	08 f0       	brcs	.+2      	; 0x2c2 <DIO_init+0x6>
 2c0:	80 c0       	rjmp	.+256    	; 0x3c2 <DIO_init+0x106>
	{
		
		switch(direction)
 2c2:	44 23       	and	r20, r20
 2c4:	21 f0       	breq	.+8      	; 0x2ce <DIO_init+0x12>
 2c6:	41 30       	cpi	r20, 0x01	; 1
 2c8:	09 f4       	brne	.+2      	; 0x2cc <DIO_init+0x10>
 2ca:	40 c0       	rjmp	.+128    	; 0x34c <DIO_init+0x90>
 2cc:	7c c0       	rjmp	.+248    	; 0x3c6 <DIO_init+0x10a>
		{
			case INPUT:
			switch(portNumber)
 2ce:	82 34       	cpi	r24, 0x42	; 66
 2d0:	b1 f0       	breq	.+44     	; 0x2fe <DIO_init+0x42>
 2d2:	18 f4       	brcc	.+6      	; 0x2da <DIO_init+0x1e>
 2d4:	81 34       	cpi	r24, 0x41	; 65
 2d6:	31 f0       	breq	.+12     	; 0x2e4 <DIO_init+0x28>
 2d8:	78 c0       	rjmp	.+240    	; 0x3ca <DIO_init+0x10e>
 2da:	83 34       	cpi	r24, 0x43	; 67
 2dc:	e9 f0       	breq	.+58     	; 0x318 <DIO_init+0x5c>
 2de:	84 34       	cpi	r24, 0x44	; 68
 2e0:	41 f1       	breq	.+80     	; 0x332 <DIO_init+0x76>
 2e2:	73 c0       	rjmp	.+230    	; 0x3ca <DIO_init+0x10e>
			{  
				
				case PORT_A:	CLEAR_BIT(DDRA,pinNumber);	break;
 2e4:	2a b3       	in	r18, 0x1a	; 26
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_init+0x34>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_init+0x30>
 2f4:	80 95       	com	r24
 2f6:	82 23       	and	r24, r18
 2f8:	8a bb       	out	0x1a, r24	; 26
#include "DIO_int.h"

EN_dioError_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	EN_dioError_t error = DIO_OK;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
		{
			case INPUT:
			switch(portNumber)
			{  
				
				case PORT_A:	CLEAR_BIT(DDRA,pinNumber);	break;
 2fc:	08 95       	ret
				case PORT_B:	CLEAR_BIT(DDRB,pinNumber);	break;
 2fe:	27 b3       	in	r18, 0x17	; 23
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_init+0x4e>
 306:	88 0f       	add	r24, r24
 308:	99 1f       	adc	r25, r25
 30a:	6a 95       	dec	r22
 30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_init+0x4a>
 30e:	80 95       	com	r24
 310:	82 23       	and	r24, r18
 312:	87 bb       	out	0x17, r24	; 23
#include "DIO_int.h"

EN_dioError_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	EN_dioError_t error = DIO_OK;
 314:	80 e0       	ldi	r24, 0x00	; 0
			case INPUT:
			switch(portNumber)
			{  
				
				case PORT_A:	CLEAR_BIT(DDRA,pinNumber);	break;
				case PORT_B:	CLEAR_BIT(DDRB,pinNumber);	break;
 316:	08 95       	ret
				case PORT_C:	CLEAR_BIT(DDRC,pinNumber);	break;
 318:	24 b3       	in	r18, 0x14	; 20
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_init+0x68>
 320:	88 0f       	add	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_init+0x64>
 328:	80 95       	com	r24
 32a:	82 23       	and	r24, r18
 32c:	84 bb       	out	0x14, r24	; 20
#include "DIO_int.h"

EN_dioError_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	EN_dioError_t error = DIO_OK;
 32e:	80 e0       	ldi	r24, 0x00	; 0
			switch(portNumber)
			{  
				
				case PORT_A:	CLEAR_BIT(DDRA,pinNumber);	break;
				case PORT_B:	CLEAR_BIT(DDRB,pinNumber);	break;
				case PORT_C:	CLEAR_BIT(DDRC,pinNumber);	break;
 330:	08 95       	ret
				case PORT_D:	CLEAR_BIT(DDRD,pinNumber);	break;
 332:	21 b3       	in	r18, 0x11	; 17
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_init+0x82>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_init+0x7e>
 342:	80 95       	com	r24
 344:	82 23       	and	r24, r18
 346:	81 bb       	out	0x11, r24	; 17
#include "DIO_int.h"

EN_dioError_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	EN_dioError_t error = DIO_OK;
 348:	80 e0       	ldi	r24, 0x00	; 0
			{  
				
				case PORT_A:	CLEAR_BIT(DDRA,pinNumber);	break;
				case PORT_B:	CLEAR_BIT(DDRB,pinNumber);	break;
				case PORT_C:	CLEAR_BIT(DDRC,pinNumber);	break;
				case PORT_D:	CLEAR_BIT(DDRD,pinNumber);	break;
 34a:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;	break;
			}
			break;
			
			case OUTPUT:
			switch(portNumber)
 34c:	82 34       	cpi	r24, 0x42	; 66
 34e:	a9 f0       	breq	.+42     	; 0x37a <DIO_init+0xbe>
 350:	18 f4       	brcc	.+6      	; 0x358 <DIO_init+0x9c>
 352:	81 34       	cpi	r24, 0x41	; 65
 354:	31 f0       	breq	.+12     	; 0x362 <DIO_init+0xa6>
 356:	3b c0       	rjmp	.+118    	; 0x3ce <DIO_init+0x112>
 358:	83 34       	cpi	r24, 0x43	; 67
 35a:	d9 f0       	breq	.+54     	; 0x392 <DIO_init+0xd6>
 35c:	84 34       	cpi	r24, 0x44	; 68
 35e:	29 f1       	breq	.+74     	; 0x3aa <DIO_init+0xee>
 360:	36 c0       	rjmp	.+108    	; 0x3ce <DIO_init+0x112>
			{     SET_BIT(DDRA,pinNumber);
				case PORT_A:	SET_BIT(DDRA,pinNumber);		break;
 362:	2a b3       	in	r18, 0x1a	; 26
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_init+0xb2>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_init+0xae>
 372:	82 2b       	or	r24, r18
 374:	8a bb       	out	0x1a, r24	; 26
#include "DIO_int.h"

EN_dioError_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	EN_dioError_t error = DIO_OK;
 376:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case OUTPUT:
			switch(portNumber)
			{     SET_BIT(DDRA,pinNumber);
				case PORT_A:	SET_BIT(DDRA,pinNumber);		break;
 378:	08 95       	ret
				case PORT_B:	SET_BIT(DDRB,pinNumber);	break;
 37a:	27 b3       	in	r18, 0x17	; 23
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_init+0xca>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_init+0xc6>
 38a:	82 2b       	or	r24, r18
 38c:	87 bb       	out	0x17, r24	; 23
#include "DIO_int.h"

EN_dioError_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	EN_dioError_t error = DIO_OK;
 38e:	80 e0       	ldi	r24, 0x00	; 0
			
			case OUTPUT:
			switch(portNumber)
			{     SET_BIT(DDRA,pinNumber);
				case PORT_A:	SET_BIT(DDRA,pinNumber);		break;
				case PORT_B:	SET_BIT(DDRB,pinNumber);	break;
 390:	08 95       	ret
				case PORT_C:	SET_BIT(DDRC,pinNumber);		break;
 392:	24 b3       	in	r18, 0x14	; 20
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_init+0xe2>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_init+0xde>
 3a2:	82 2b       	or	r24, r18
 3a4:	84 bb       	out	0x14, r24	; 20
#include "DIO_int.h"

EN_dioError_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	EN_dioError_t error = DIO_OK;
 3a6:	80 e0       	ldi	r24, 0x00	; 0
			case OUTPUT:
			switch(portNumber)
			{     SET_BIT(DDRA,pinNumber);
				case PORT_A:	SET_BIT(DDRA,pinNumber);		break;
				case PORT_B:	SET_BIT(DDRB,pinNumber);	break;
				case PORT_C:	SET_BIT(DDRC,pinNumber);		break;
 3a8:	08 95       	ret
				case PORT_D:	SET_BIT(DDRD,pinNumber);		break;
 3aa:	21 b3       	in	r18, 0x11	; 17
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_init+0xfa>
 3b2:	88 0f       	add	r24, r24
 3b4:	99 1f       	adc	r25, r25
 3b6:	6a 95       	dec	r22
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_init+0xf6>
 3ba:	82 2b       	or	r24, r18
 3bc:	81 bb       	out	0x11, r24	; 17
#include "DIO_int.h"

EN_dioError_t DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	EN_dioError_t error = DIO_OK;
 3be:	80 e0       	ldi	r24, 0x00	; 0
			switch(portNumber)
			{     SET_BIT(DDRA,pinNumber);
				case PORT_A:	SET_BIT(DDRA,pinNumber);		break;
				case PORT_B:	SET_BIT(DDRB,pinNumber);	break;
				case PORT_C:	SET_BIT(DDRC,pinNumber);		break;
				case PORT_D:	SET_BIT(DDRD,pinNumber);		break;
 3c0:	08 95       	ret
		}
		
	}
	else
	{
		error = WRONG_PIN_NUMBER;
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;	break;
			}
			break;
			
			default:
			error = WRONG_DIRECTION;
 3c6:	83 e0       	ldi	r24, 0x03	; 3
 3c8:	08 95       	ret
				
				case PORT_A:	CLEAR_BIT(DDRA,pinNumber);	break;
				case PORT_B:	CLEAR_BIT(DDRB,pinNumber);	break;
				case PORT_C:	CLEAR_BIT(DDRC,pinNumber);	break;
				case PORT_D:	CLEAR_BIT(DDRD,pinNumber);	break;
				default:		error = WRONG_PORT_NUMBER;	break;
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	08 95       	ret
			{     SET_BIT(DDRA,pinNumber);
				case PORT_A:	SET_BIT(DDRA,pinNumber);		break;
				case PORT_B:	SET_BIT(DDRB,pinNumber);	break;
				case PORT_C:	SET_BIT(DDRC,pinNumber);		break;
				case PORT_D:	SET_BIT(DDRD,pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;	break;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;
}
 3d0:	08 95       	ret

000003d2 <DIO_write>:
EN_dioError_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	
	EN_dioError_t error = DIO_OK;
	if (pinNumber < 8)
 3d2:	68 30       	cpi	r22, 0x08	; 8
 3d4:	08 f0       	brcs	.+2      	; 0x3d8 <DIO_write+0x6>
 3d6:	80 c0       	rjmp	.+256    	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
	{
		switch(value)
 3d8:	44 23       	and	r20, r20
 3da:	21 f0       	breq	.+8      	; 0x3e4 <DIO_write+0x12>
 3dc:	41 30       	cpi	r20, 0x01	; 1
 3de:	09 f4       	brne	.+2      	; 0x3e2 <DIO_write+0x10>
 3e0:	40 c0       	rjmp	.+128    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 3e2:	7c c0       	rjmp	.+248    	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
		{
			case LOW:
			switch(portNumber)
 3e4:	82 34       	cpi	r24, 0x42	; 66
 3e6:	b1 f0       	breq	.+44     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3e8:	18 f4       	brcc	.+6      	; 0x3f0 <DIO_write+0x1e>
 3ea:	81 34       	cpi	r24, 0x41	; 65
 3ec:	31 f0       	breq	.+12     	; 0x3fa <DIO_write+0x28>
 3ee:	78 c0       	rjmp	.+240    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 3f0:	83 34       	cpi	r24, 0x43	; 67
 3f2:	e9 f0       	breq	.+58     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 3f4:	84 34       	cpi	r24, 0x44	; 68
 3f6:	41 f1       	breq	.+80     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 3f8:	73 c0       	rjmp	.+230    	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
			{
				case PORT_A:	CLEAR_BIT(PORTA,pinNumber);	break;
 3fa:	2b b3       	in	r18, 0x1b	; 27
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 c0       	rjmp	.+4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	6a 95       	dec	r22
 408:	e2 f7       	brpl	.-8      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 40a:	80 95       	com	r24
 40c:	82 23       	and	r24, r18
 40e:	8b bb       	out	0x1b, r24	; 27
	return error;
}
EN_dioError_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	
	EN_dioError_t error = DIO_OK;
 410:	80 e0       	ldi	r24, 0x00	; 0
		switch(value)
		{
			case LOW:
			switch(portNumber)
			{
				case PORT_A:	CLEAR_BIT(PORTA,pinNumber);	break;
 412:	08 95       	ret
				case PORT_B:	CLEAR_BIT(PORTB,pinNumber);	break;
 414:	28 b3       	in	r18, 0x18	; 24
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 424:	80 95       	com	r24
 426:	82 23       	and	r24, r18
 428:	88 bb       	out	0x18, r24	; 24
	return error;
}
EN_dioError_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	
	EN_dioError_t error = DIO_OK;
 42a:	80 e0       	ldi	r24, 0x00	; 0
		{
			case LOW:
			switch(portNumber)
			{
				case PORT_A:	CLEAR_BIT(PORTA,pinNumber);	break;
				case PORT_B:	CLEAR_BIT(PORTB,pinNumber);	break;
 42c:	08 95       	ret
				case PORT_C:	CLEAR_BIT(PORTC,pinNumber);	break;
 42e:	25 b3       	in	r18, 0x15	; 21
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	88 0f       	add	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	6a 95       	dec	r22
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	80 95       	com	r24
 440:	82 23       	and	r24, r18
 442:	85 bb       	out	0x15, r24	; 21
	return error;
}
EN_dioError_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	
	EN_dioError_t error = DIO_OK;
 444:	80 e0       	ldi	r24, 0x00	; 0
			case LOW:
			switch(portNumber)
			{
				case PORT_A:	CLEAR_BIT(PORTA,pinNumber);	break;
				case PORT_B:	CLEAR_BIT(PORTB,pinNumber);	break;
				case PORT_C:	CLEAR_BIT(PORTC,pinNumber);	break;
 446:	08 95       	ret
				case PORT_D:	CLEAR_BIT(PORTD,pinNumber);	break;
 448:	22 b3       	in	r18, 0x12	; 18
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	6a 95       	dec	r22
 456:	e2 f7       	brpl	.-8      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 458:	80 95       	com	r24
 45a:	82 23       	and	r24, r18
 45c:	82 bb       	out	0x12, r24	; 18
	return error;
}
EN_dioError_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	
	EN_dioError_t error = DIO_OK;
 45e:	80 e0       	ldi	r24, 0x00	; 0
			switch(portNumber)
			{
				case PORT_A:	CLEAR_BIT(PORTA,pinNumber);	break;
				case PORT_B:	CLEAR_BIT(PORTB,pinNumber);	break;
				case PORT_C:	CLEAR_BIT(PORTC,pinNumber);	break;
				case PORT_D:	CLEAR_BIT(PORTD,pinNumber);	break;
 460:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;	break;
			}
			break;
			
			case HIGH:
			switch(portNumber)
 462:	82 34       	cpi	r24, 0x42	; 66
 464:	a9 f0       	breq	.+42     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 466:	18 f4       	brcc	.+6      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 468:	81 34       	cpi	r24, 0x41	; 65
 46a:	31 f0       	breq	.+12     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 46c:	3b c0       	rjmp	.+118    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 46e:	83 34       	cpi	r24, 0x43	; 67
 470:	d9 f0       	breq	.+54     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 472:	84 34       	cpi	r24, 0x44	; 68
 474:	29 f1       	breq	.+74     	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
 476:	36 c0       	rjmp	.+108    	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
			{
				case PORT_A:	SET_BIT(PORTA,pinNumber);		break;
 478:	2b b3       	in	r18, 0x1b	; 27
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	90 e0       	ldi	r25, 0x00	; 0
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	6a 95       	dec	r22
 486:	e2 f7       	brpl	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	82 2b       	or	r24, r18
 48a:	8b bb       	out	0x1b, r24	; 27
	return error;
}
EN_dioError_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	
	EN_dioError_t error = DIO_OK;
 48c:	80 e0       	ldi	r24, 0x00	; 0
			break;
			
			case HIGH:
			switch(portNumber)
			{
				case PORT_A:	SET_BIT(PORTA,pinNumber);		break;
 48e:	08 95       	ret
				case PORT_B:	SET_BIT(PORTA,pinNumber);	    break;
 490:	2b b3       	in	r18, 0x1b	; 27
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 c0       	rjmp	.+4      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	6a 95       	dec	r22
 49e:	e2 f7       	brpl	.-8      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 4a0:	82 2b       	or	r24, r18
 4a2:	8b bb       	out	0x1b, r24	; 27
	return error;
}
EN_dioError_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	
	EN_dioError_t error = DIO_OK;
 4a4:	80 e0       	ldi	r24, 0x00	; 0
			
			case HIGH:
			switch(portNumber)
			{
				case PORT_A:	SET_BIT(PORTA,pinNumber);		break;
				case PORT_B:	SET_BIT(PORTA,pinNumber);	    break;
 4a6:	08 95       	ret
				case PORT_C:	SET_BIT(PORTA,pinNumber);		break;
 4a8:	2b b3       	in	r18, 0x1b	; 27
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4b8:	82 2b       	or	r24, r18
 4ba:	8b bb       	out	0x1b, r24	; 27
	return error;
}
EN_dioError_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	
	EN_dioError_t error = DIO_OK;
 4bc:	80 e0       	ldi	r24, 0x00	; 0
			case HIGH:
			switch(portNumber)
			{
				case PORT_A:	SET_BIT(PORTA,pinNumber);		break;
				case PORT_B:	SET_BIT(PORTA,pinNumber);	    break;
				case PORT_C:	SET_BIT(PORTA,pinNumber);		break;
 4be:	08 95       	ret
				case PORT_D:	SET_BIT(PORTA,pinNumber);		break;
 4c0:	2b b3       	in	r18, 0x1b	; 27
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	6a 95       	dec	r22
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4d0:	82 2b       	or	r24, r18
 4d2:	8b bb       	out	0x1b, r24	; 27
	return error;
}
EN_dioError_t DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	
	EN_dioError_t error = DIO_OK;
 4d4:	80 e0       	ldi	r24, 0x00	; 0
			switch(portNumber)
			{
				case PORT_A:	SET_BIT(PORTA,pinNumber);		break;
				case PORT_B:	SET_BIT(PORTA,pinNumber);	    break;
				case PORT_C:	SET_BIT(PORTA,pinNumber);		break;
				case PORT_D:	SET_BIT(PORTA,pinNumber);		break;
 4d6:	08 95       	ret
			break;
		}
	}
	else
	{
		error = WRONG_PIN_NUMBER;
 4d8:	82 e0       	ldi	r24, 0x02	; 2
 4da:	08 95       	ret
				default:		error = WRONG_PORT_NUMBER;		break;
			}
			break;
			
			default:
			error = WRONG_VALUE;
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	08 95       	ret
			{
				case PORT_A:	CLEAR_BIT(PORTA,pinNumber);	break;
				case PORT_B:	CLEAR_BIT(PORTB,pinNumber);	break;
				case PORT_C:	CLEAR_BIT(PORTC,pinNumber);	break;
				case PORT_D:	CLEAR_BIT(PORTD,pinNumber);	break;
				default:		error = WRONG_PORT_NUMBER;	break;
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	08 95       	ret
			{
				case PORT_A:	SET_BIT(PORTA,pinNumber);		break;
				case PORT_B:	SET_BIT(PORTA,pinNumber);	    break;
				case PORT_C:	SET_BIT(PORTA,pinNumber);		break;
				case PORT_D:	SET_BIT(PORTA,pinNumber);		break;
				default:		error = WRONG_PORT_NUMBER;		break;
 4e4:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;
}
 4e6:	08 95       	ret

000004e8 <EXT_INT_Enable>:
			}
			
		}
		

}
 4e8:	83 30       	cpi	r24, 0x03	; 3
 4ea:	b0 f4       	brcc	.+44     	; 0x518 <EXT_INT_Enable+0x30>
 4ec:	81 30       	cpi	r24, 0x01	; 1
 4ee:	49 f0       	breq	.+18     	; 0x502 <EXT_INT_Enable+0x1a>
 4f0:	18 f0       	brcs	.+6      	; 0x4f8 <EXT_INT_Enable+0x10>
 4f2:	82 30       	cpi	r24, 0x02	; 2
 4f4:	59 f0       	breq	.+22     	; 0x50c <EXT_INT_Enable+0x24>
 4f6:	0f c0       	rjmp	.+30     	; 0x516 <EXT_INT_Enable+0x2e>
 4f8:	8b b7       	in	r24, 0x3b	; 59
 4fa:	80 64       	ori	r24, 0x40	; 64
 4fc:	8b bf       	out	0x3b, r24	; 59
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	08 95       	ret
 502:	8b b7       	in	r24, 0x3b	; 59
 504:	80 68       	ori	r24, 0x80	; 128
 506:	8b bf       	out	0x3b, r24	; 59
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	08 95       	ret
 50c:	8b b7       	in	r24, 0x3b	; 59
 50e:	80 62       	ori	r24, 0x20	; 32
 510:	8b bf       	out	0x3b, r24	; 59
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	08 95       	ret
 516:	08 95       	ret
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	08 95       	ret

0000051c <EXT_INT_TriggerEdge>:
INTERRUPT_ERROR_TYPE EXT_INT_TriggerEdge (EXInterruptSource_type interrupt, TriggerEdge_type edge )
{
	if (interrupt>3)
 51c:	84 30       	cpi	r24, 0x04	; 4
 51e:	08 f0       	brcs	.+2      	; 0x522 <EXT_INT_TriggerEdge+0x6>
 520:	6b c0       	rjmp	.+214    	; 0x5f8 <EXT_INT_TriggerEdge+0xdc>
	{
		return INVALID_INTERRUPT;
	}
	else
	{
		switch (interrupt)
 522:	81 30       	cpi	r24, 0x01	; 1
 524:	81 f1       	breq	.+96     	; 0x586 <EXT_INT_TriggerEdge+0x6a>
 526:	20 f0       	brcs	.+8      	; 0x530 <EXT_INT_TriggerEdge+0x14>
 528:	82 30       	cpi	r24, 0x02	; 2
 52a:	09 f4       	brne	.+2      	; 0x52e <EXT_INT_TriggerEdge+0x12>
 52c:	56 c0       	rjmp	.+172    	; 0x5da <EXT_INT_TriggerEdge+0xbe>
 52e:	63 c0       	rjmp	.+198    	; 0x5f6 <EXT_INT_TriggerEdge+0xda>
		{
			case EX_INT0:
			if (edge>4)
 530:	65 30       	cpi	r22, 0x05	; 5
 532:	08 f0       	brcs	.+2      	; 0x536 <EXT_INT_TriggerEdge+0x1a>
 534:	63 c0       	rjmp	.+198    	; 0x5fc <EXT_INT_TriggerEdge+0xe0>
			{
				return INVALID_TRIGGER_STATE;
			}
			else
			{
				switch (edge)
 536:	61 30       	cpi	r22, 0x01	; 1
 538:	71 f0       	breq	.+28     	; 0x556 <EXT_INT_TriggerEdge+0x3a>
 53a:	28 f0       	brcs	.+10     	; 0x546 <EXT_INT_TriggerEdge+0x2a>
 53c:	62 30       	cpi	r22, 0x02	; 2
 53e:	99 f0       	breq	.+38     	; 0x566 <EXT_INT_TriggerEdge+0x4a>
 540:	63 30       	cpi	r22, 0x03	; 3
 542:	c9 f0       	breq	.+50     	; 0x576 <EXT_INT_TriggerEdge+0x5a>
 544:	20 c0       	rjmp	.+64     	; 0x586 <EXT_INT_TriggerEdge+0x6a>
				{
			
				case LOW_LEVEL:
				CLEAR_BIT(MCUCR,ISC00);
 546:	85 b7       	in	r24, 0x35	; 53
 548:	8e 7f       	andi	r24, 0xFE	; 254
 54a:	85 bf       	out	0x35, r24	; 53
				CLEAR_BIT(MCUCR,ISC01);
 54c:	85 b7       	in	r24, 0x35	; 53
 54e:	8d 7f       	andi	r24, 0xFD	; 253
 550:	85 bf       	out	0x35, r24	; 53
				return VALID_TRIGGER_STATE;
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	08 95       	ret
				break;
				case ANY_LOGIC_CHANGE:
				SET_BIT(MCUCR,ISC00);
 556:	85 b7       	in	r24, 0x35	; 53
 558:	81 60       	ori	r24, 0x01	; 1
 55a:	85 bf       	out	0x35, r24	; 53
				CLEAR_BIT(MCUCR,ISC01);
 55c:	85 b7       	in	r24, 0x35	; 53
 55e:	8d 7f       	andi	r24, 0xFD	; 253
 560:	85 bf       	out	0x35, r24	; 53
				return VALID_TRIGGER_STATE;
 562:	82 e0       	ldi	r24, 0x02	; 2
 564:	08 95       	ret
				break;
				case FALLING_EDGE:
				CLEAR_BIT(MCUCR,ISC00);
 566:	85 b7       	in	r24, 0x35	; 53
 568:	8e 7f       	andi	r24, 0xFE	; 254
 56a:	85 bf       	out	0x35, r24	; 53
				SET_BIT(MCUCR,ISC01);
 56c:	85 b7       	in	r24, 0x35	; 53
 56e:	82 60       	ori	r24, 0x02	; 2
 570:	85 bf       	out	0x35, r24	; 53
				return VALID_TRIGGER_STATE;
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	08 95       	ret
				break;
				case RISING_EDGE:
				SET_BIT(MCUCR,ISC00);
 576:	85 b7       	in	r24, 0x35	; 53
 578:	81 60       	ori	r24, 0x01	; 1
 57a:	85 bf       	out	0x35, r24	; 53
				SET_BIT(MCUCR,ISC01);
 57c:	85 b7       	in	r24, 0x35	; 53
 57e:	82 60       	ori	r24, 0x02	; 2
 580:	85 bf       	out	0x35, r24	; 53
				return VALID_TRIGGER_STATE;
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	08 95       	ret
				}
			}
			
			
			case EX_INT1:
			if (edge>4)
 586:	65 30       	cpi	r22, 0x05	; 5
 588:	d8 f5       	brcc	.+118    	; 0x600 <EXT_INT_TriggerEdge+0xe4>
			{
				return INVALID_TRIGGER_STATE;
			}
			else
			{
				switch (edge)
 58a:	61 30       	cpi	r22, 0x01	; 1
 58c:	71 f0       	breq	.+28     	; 0x5aa <EXT_INT_TriggerEdge+0x8e>
 58e:	28 f0       	brcs	.+10     	; 0x59a <EXT_INT_TriggerEdge+0x7e>
 590:	62 30       	cpi	r22, 0x02	; 2
 592:	99 f0       	breq	.+38     	; 0x5ba <EXT_INT_TriggerEdge+0x9e>
 594:	63 30       	cpi	r22, 0x03	; 3
 596:	c9 f0       	breq	.+50     	; 0x5ca <EXT_INT_TriggerEdge+0xae>
 598:	20 c0       	rjmp	.+64     	; 0x5da <EXT_INT_TriggerEdge+0xbe>
				{
					
					case LOW_LEVEL:
					CLEAR_BIT(MCUCR,ISC10);
 59a:	85 b7       	in	r24, 0x35	; 53
 59c:	8b 7f       	andi	r24, 0xFB	; 251
 59e:	85 bf       	out	0x35, r24	; 53
					CLEAR_BIT(MCUCR,ISC11);
 5a0:	85 b7       	in	r24, 0x35	; 53
 5a2:	87 7f       	andi	r24, 0xF7	; 247
 5a4:	85 bf       	out	0x35, r24	; 53
					return VALID_TRIGGER_STATE;
 5a6:	82 e0       	ldi	r24, 0x02	; 2
 5a8:	08 95       	ret
					break;
					case ANY_LOGIC_CHANGE:
					SET_BIT(MCUCR,ISC10);
 5aa:	85 b7       	in	r24, 0x35	; 53
 5ac:	84 60       	ori	r24, 0x04	; 4
 5ae:	85 bf       	out	0x35, r24	; 53
					CLEAR_BIT(MCUCR,ISC11);
 5b0:	85 b7       	in	r24, 0x35	; 53
 5b2:	87 7f       	andi	r24, 0xF7	; 247
 5b4:	85 bf       	out	0x35, r24	; 53
					return VALID_TRIGGER_STATE;
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	08 95       	ret
					break;
					case FALLING_EDGE:
					CLEAR_BIT(MCUCR,ISC10);
 5ba:	85 b7       	in	r24, 0x35	; 53
 5bc:	8b 7f       	andi	r24, 0xFB	; 251
 5be:	85 bf       	out	0x35, r24	; 53
					SET_BIT(MCUCR,ISC11);
 5c0:	85 b7       	in	r24, 0x35	; 53
 5c2:	88 60       	ori	r24, 0x08	; 8
 5c4:	85 bf       	out	0x35, r24	; 53
					return VALID_TRIGGER_STATE;
 5c6:	82 e0       	ldi	r24, 0x02	; 2
 5c8:	08 95       	ret
					break;
					case RISING_EDGE:
					SET_BIT(MCUCR,ISC10);
 5ca:	85 b7       	in	r24, 0x35	; 53
 5cc:	84 60       	ori	r24, 0x04	; 4
 5ce:	85 bf       	out	0x35, r24	; 53
					SET_BIT(MCUCR,ISC11);
 5d0:	85 b7       	in	r24, 0x35	; 53
 5d2:	88 60       	ori	r24, 0x08	; 8
 5d4:	85 bf       	out	0x35, r24	; 53
					return VALID_TRIGGER_STATE;
 5d6:	82 e0       	ldi	r24, 0x02	; 2
 5d8:	08 95       	ret
		
		
		

			case EX_INT2:
			if (edge>4)
 5da:	65 30       	cpi	r22, 0x05	; 5
 5dc:	98 f4       	brcc	.+38     	; 0x604 <EXT_INT_TriggerEdge+0xe8>
				
				return INVALID_TRIGGER_STATE;
			}
			else
			{
				switch (edge)
 5de:	62 30       	cpi	r22, 0x02	; 2
 5e0:	19 f0       	breq	.+6      	; 0x5e8 <EXT_INT_TriggerEdge+0xcc>
 5e2:	63 30       	cpi	r22, 0x03	; 3
 5e4:	29 f0       	breq	.+10     	; 0x5f0 <EXT_INT_TriggerEdge+0xd4>
 5e6:	07 c0       	rjmp	.+14     	; 0x5f6 <EXT_INT_TriggerEdge+0xda>
					break;
					case  ANY_LOGIC_CHANGE:
					/*DO nothing OR set default */
					break;
					case FALLING_EDGE:
					CLEAR_BIT(MCUCSR,ISC2);
 5e8:	84 b7       	in	r24, 0x34	; 52
 5ea:	8f 7b       	andi	r24, 0xBF	; 191
 5ec:	84 bf       	out	0x34, r24	; 52
					break;
 5ee:	03 c0       	rjmp	.+6      	; 0x5f6 <EXT_INT_TriggerEdge+0xda>
					case RISING_EDGE:
					SET_BIT(MCUCSR,ISC2);
 5f0:	84 b7       	in	r24, 0x34	; 52
 5f2:	80 64       	ori	r24, 0x40	; 64
 5f4:	84 bf       	out	0x34, r24	; 52
		}
		
			
		
	}
}
 5f6:	08 95       	ret
}
INTERRUPT_ERROR_TYPE EXT_INT_TriggerEdge (EXInterruptSource_type interrupt, TriggerEdge_type edge )
{
	if (interrupt>3)
	{
		return INVALID_INTERRUPT;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	08 95       	ret
		switch (interrupt)
		{
			case EX_INT0:
			if (edge>4)
			{
				return INVALID_TRIGGER_STATE;
 5fc:	83 e0       	ldi	r24, 0x03	; 3
 5fe:	08 95       	ret
			
			
			case EX_INT1:
			if (edge>4)
			{
				return INVALID_TRIGGER_STATE;
 600:	83 e0       	ldi	r24, 0x03	; 3
 602:	08 95       	ret

			case EX_INT2:
			if (edge>4)
			{
				
				return INVALID_TRIGGER_STATE;
 604:	83 e0       	ldi	r24, 0x03	; 3
		}
		
			
		
	}
}
 606:	08 95       	ret

00000608 <_exit>:
 608:	f8 94       	cli

0000060a <__stop_program>:
 60a:	ff cf       	rjmp	.-2      	; 0x60a <__stop_program>


project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000006f8  0000078c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000474  00800070  00800070  0000079c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e5f  00000000  00000000  000009c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d50  00000000  00000000  00002827  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f9e  00000000  00000000  00003577  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00004518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c32  00000000  00000000  00004838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000126b  00000000  00000000  0000546a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000066d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 c8 02 	jmp	0x590	; 0x590 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	24 e0       	ldi	r18, 0x04	; 4
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3e       	cpi	r26, 0xE4	; 228
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  8a:	0c 94 7a 03 	jmp	0x6f4	; 0x6f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
 */ 
#include "app.h"
extern bcm_instance_t bcm_config;

void app_init(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <app_init+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <app_init+0x8>
  9a:	00 d0       	rcall	.+0      	; 0x9c <app_init+0xa>
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
bcm_init(&bcm_config);
  a0:	8b e7       	ldi	r24, 0x7B	; 123
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 0f 03 	call	0x61e	; 0x61e <bcm_init>
LED_init(LED0);
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	0e 94 7a 00 	call	0xf4	; 0xf4 <LED_init>
LED_init(LED1);
  ae:	85 e0       	ldi	r24, 0x05	; 5
  b0:	0e 94 7a 00 	call	0xf4	; 0xf4 <LED_init>

Uchar8_t x[6]="momen";
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	e9 e6       	ldi	r30, 0x69	; 105
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	de 01       	movw	r26, r28
  bc:	11 96       	adiw	r26, 0x01	; 1
  be:	01 90       	ld	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	8a 95       	dec	r24
  c4:	e1 f7       	brne	.-8      	; 0xbe <app_init+0x2c>
bcm_send_n(&bcm_config,x,CH_size);
  c6:	45 e0       	ldi	r20, 0x05	; 5
  c8:	50 e0       	ldi	r21, 0x00	; 0
  ca:	be 01       	movw	r22, r28
  cc:	6f 5f       	subi	r22, 0xFF	; 255
  ce:	7f 4f       	sbci	r23, 0xFF	; 255
  d0:	8b e7       	ldi	r24, 0x7B	; 123
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 27 03 	call	0x64e	; 0x64e <bcm_send_n>
}
  d8:	26 96       	adiw	r28, 0x06	; 6
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	f8 94       	cli
  de:	de bf       	out	0x3e, r29	; 62
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	cd bf       	out	0x3d, r28	; 61
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <app_super_loop>:
void app_super_loop()
{
	bcm_dispatcher(&bcm_config);
  ea:	8b e7       	ldi	r24, 0x7B	; 123
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 37 03 	call	0x66e	; 0x66e <bcm_dispatcher>
  f2:	08 95       	ret

000000f4 <LED_init>:
 * @param ledPort [in] LED Port
 * @param ledPin [in] LED Pin number in ledPort
 */
void LED_init( Uchar8_t ledPin)
{
      DIO_initpinn( ledPin, OUTPUT);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	0e 94 8c 00 	call	0x118	; 0x118 <DIO_initpinn>
  fa:	08 95       	ret

000000fc <main>:
#include "APPLICATION/app.h"
#include <util/delay.h>


int main(void)
{app_init();
  fc:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
    while (1) 
    {
		app_super_loop();
 100:	0e 94 75 00 	call	0xea	; 0xea <app_super_loop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	80 e7       	ldi	r24, 0x70	; 112
 108:	92 e0       	ldi	r25, 0x02	; 2
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0xe>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x18>
 114:	00 00       	nop
 116:	f4 cf       	rjmp	.-24     	; 0x100 <main+0x4>

00000118 <DIO_initpinn>:

			*volt=GET_BIT(DIO_PORTC_PIN_REG,pin_num);
			break;
			case PD:

			*volt=GET_BIT(DIO_PORTD_PIN_REG,pin_num);
 118:	98 2f       	mov	r25, r24
 11a:	96 95       	lsr	r25
 11c:	96 95       	lsr	r25
 11e:	96 95       	lsr	r25
 120:	87 70       	andi	r24, 0x07	; 7
 122:	61 30       	cpi	r22, 0x01	; 1
 124:	09 f4       	brne	.+2      	; 0x128 <DIO_initpinn+0x10>
 126:	55 c0       	rjmp	.+170    	; 0x1d2 <DIO_initpinn+0xba>
 128:	20 f0       	brcs	.+8      	; 0x132 <DIO_initpinn+0x1a>
 12a:	62 30       	cpi	r22, 0x02	; 2
 12c:	09 f4       	brne	.+2      	; 0x130 <DIO_initpinn+0x18>
 12e:	a1 c0       	rjmp	.+322    	; 0x272 <DIO_initpinn+0x15a>
 130:	08 95       	ret
 132:	91 30       	cpi	r25, 0x01	; 1
 134:	c1 f0       	breq	.+48     	; 0x166 <DIO_initpinn+0x4e>
 136:	28 f0       	brcs	.+10     	; 0x142 <DIO_initpinn+0x2a>
 138:	92 30       	cpi	r25, 0x02	; 2
 13a:	39 f1       	breq	.+78     	; 0x18a <DIO_initpinn+0x72>
 13c:	93 30       	cpi	r25, 0x03	; 3
 13e:	b9 f1       	breq	.+110    	; 0x1ae <DIO_initpinn+0x96>
 140:	08 95       	ret
 142:	4a b3       	in	r20, 0x1a	; 26
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	b9 01       	movw	r22, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_initpinn+0x38>
 14c:	66 0f       	add	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	8a 95       	dec	r24
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_initpinn+0x34>
 154:	cb 01       	movw	r24, r22
 156:	94 2f       	mov	r25, r20
 158:	98 2b       	or	r25, r24
 15a:	9a bb       	out	0x1a, r25	; 26
 15c:	9b b3       	in	r25, 0x1b	; 27
 15e:	80 95       	com	r24
 160:	89 23       	and	r24, r25
 162:	8b bb       	out	0x1b, r24	; 27
 164:	08 95       	ret
 166:	47 b3       	in	r20, 0x17	; 23
 168:	21 e0       	ldi	r18, 0x01	; 1
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	b9 01       	movw	r22, r18
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_initpinn+0x5c>
 170:	66 0f       	add	r22, r22
 172:	77 1f       	adc	r23, r23
 174:	8a 95       	dec	r24
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_initpinn+0x58>
 178:	cb 01       	movw	r24, r22
 17a:	94 2f       	mov	r25, r20
 17c:	98 2b       	or	r25, r24
 17e:	97 bb       	out	0x17, r25	; 23
 180:	98 b3       	in	r25, 0x18	; 24
 182:	80 95       	com	r24
 184:	89 23       	and	r24, r25
 186:	88 bb       	out	0x18, r24	; 24
 188:	08 95       	ret
 18a:	44 b3       	in	r20, 0x14	; 20
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	b9 01       	movw	r22, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_initpinn+0x80>
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	8a 95       	dec	r24
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_initpinn+0x7c>
 19c:	cb 01       	movw	r24, r22
 19e:	94 2f       	mov	r25, r20
 1a0:	98 2b       	or	r25, r24
 1a2:	94 bb       	out	0x14, r25	; 20
 1a4:	95 b3       	in	r25, 0x15	; 21
 1a6:	80 95       	com	r24
 1a8:	89 23       	and	r24, r25
 1aa:	85 bb       	out	0x15, r24	; 21
 1ac:	08 95       	ret
 1ae:	41 b3       	in	r20, 0x11	; 17
 1b0:	21 e0       	ldi	r18, 0x01	; 1
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	b9 01       	movw	r22, r18
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_initpinn+0xa4>
 1b8:	66 0f       	add	r22, r22
 1ba:	77 1f       	adc	r23, r23
 1bc:	8a 95       	dec	r24
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_initpinn+0xa0>
 1c0:	cb 01       	movw	r24, r22
 1c2:	94 2f       	mov	r25, r20
 1c4:	98 2b       	or	r25, r24
 1c6:	91 bb       	out	0x11, r25	; 17
 1c8:	92 b3       	in	r25, 0x12	; 18
 1ca:	80 95       	com	r24
 1cc:	89 23       	and	r24, r25
 1ce:	82 bb       	out	0x12, r24	; 18
 1d0:	08 95       	ret
 1d2:	91 30       	cpi	r25, 0x01	; 1
 1d4:	c1 f0       	breq	.+48     	; 0x206 <DIO_initpinn+0xee>
 1d6:	28 f0       	brcs	.+10     	; 0x1e2 <DIO_initpinn+0xca>
 1d8:	92 30       	cpi	r25, 0x02	; 2
 1da:	39 f1       	breq	.+78     	; 0x22a <DIO_initpinn+0x112>
 1dc:	93 30       	cpi	r25, 0x03	; 3
 1de:	b9 f1       	breq	.+110    	; 0x24e <DIO_initpinn+0x136>
 1e0:	08 95       	ret
 1e2:	4a b3       	in	r20, 0x1a	; 26
 1e4:	21 e0       	ldi	r18, 0x01	; 1
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	b9 01       	movw	r22, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_initpinn+0xd8>
 1ec:	66 0f       	add	r22, r22
 1ee:	77 1f       	adc	r23, r23
 1f0:	8a 95       	dec	r24
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_initpinn+0xd4>
 1f4:	cb 01       	movw	r24, r22
 1f6:	80 95       	com	r24
 1f8:	94 2f       	mov	r25, r20
 1fa:	98 23       	and	r25, r24
 1fc:	9a bb       	out	0x1a, r25	; 26
 1fe:	9b b3       	in	r25, 0x1b	; 27
 200:	89 23       	and	r24, r25
 202:	8b bb       	out	0x1b, r24	; 27
 204:	08 95       	ret
 206:	47 b3       	in	r20, 0x17	; 23
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	b9 01       	movw	r22, r18
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_initpinn+0xfc>
 210:	66 0f       	add	r22, r22
 212:	77 1f       	adc	r23, r23
 214:	8a 95       	dec	r24
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_initpinn+0xf8>
 218:	cb 01       	movw	r24, r22
 21a:	80 95       	com	r24
 21c:	94 2f       	mov	r25, r20
 21e:	98 23       	and	r25, r24
 220:	97 bb       	out	0x17, r25	; 23
 222:	98 b3       	in	r25, 0x18	; 24
 224:	89 23       	and	r24, r25
 226:	88 bb       	out	0x18, r24	; 24
 228:	08 95       	ret
 22a:	44 b3       	in	r20, 0x14	; 20
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	b9 01       	movw	r22, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_initpinn+0x120>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	8a 95       	dec	r24
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_initpinn+0x11c>
 23c:	cb 01       	movw	r24, r22
 23e:	80 95       	com	r24
 240:	94 2f       	mov	r25, r20
 242:	98 23       	and	r25, r24
 244:	94 bb       	out	0x14, r25	; 20
 246:	95 b3       	in	r25, 0x15	; 21
 248:	89 23       	and	r24, r25
 24a:	85 bb       	out	0x15, r24	; 21
 24c:	08 95       	ret
 24e:	41 b3       	in	r20, 0x11	; 17
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	b9 01       	movw	r22, r18
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_initpinn+0x144>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	8a 95       	dec	r24
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_initpinn+0x140>
 260:	cb 01       	movw	r24, r22
 262:	80 95       	com	r24
 264:	94 2f       	mov	r25, r20
 266:	98 23       	and	r25, r24
 268:	91 bb       	out	0x11, r25	; 17
 26a:	92 b3       	in	r25, 0x12	; 18
 26c:	89 23       	and	r24, r25
 26e:	82 bb       	out	0x12, r24	; 18
 270:	08 95       	ret
 272:	91 30       	cpi	r25, 0x01	; 1
 274:	c1 f0       	breq	.+48     	; 0x2a6 <DIO_initpinn+0x18e>
 276:	28 f0       	brcs	.+10     	; 0x282 <DIO_initpinn+0x16a>
 278:	92 30       	cpi	r25, 0x02	; 2
 27a:	39 f1       	breq	.+78     	; 0x2ca <DIO_initpinn+0x1b2>
 27c:	93 30       	cpi	r25, 0x03	; 3
 27e:	b9 f1       	breq	.+110    	; 0x2ee <DIO_initpinn+0x1d6>
 280:	08 95       	ret
 282:	4a b3       	in	r20, 0x1a	; 26
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	b9 01       	movw	r22, r18
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_initpinn+0x178>
 28c:	66 0f       	add	r22, r22
 28e:	77 1f       	adc	r23, r23
 290:	8a 95       	dec	r24
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_initpinn+0x174>
 294:	cb 01       	movw	r24, r22
 296:	96 2f       	mov	r25, r22
 298:	90 95       	com	r25
 29a:	94 23       	and	r25, r20
 29c:	9a bb       	out	0x1a, r25	; 26
 29e:	9b b3       	in	r25, 0x1b	; 27
 2a0:	89 2b       	or	r24, r25
 2a2:	8b bb       	out	0x1b, r24	; 27
 2a4:	08 95       	ret
 2a6:	47 b3       	in	r20, 0x17	; 23
 2a8:	21 e0       	ldi	r18, 0x01	; 1
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	b9 01       	movw	r22, r18
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_initpinn+0x19c>
 2b0:	66 0f       	add	r22, r22
 2b2:	77 1f       	adc	r23, r23
 2b4:	8a 95       	dec	r24
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_initpinn+0x198>
 2b8:	cb 01       	movw	r24, r22
 2ba:	96 2f       	mov	r25, r22
 2bc:	90 95       	com	r25
 2be:	94 23       	and	r25, r20
 2c0:	97 bb       	out	0x17, r25	; 23
 2c2:	98 b3       	in	r25, 0x18	; 24
 2c4:	89 2b       	or	r24, r25
 2c6:	88 bb       	out	0x18, r24	; 24
 2c8:	08 95       	ret
 2ca:	44 b3       	in	r20, 0x14	; 20
 2cc:	21 e0       	ldi	r18, 0x01	; 1
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	b9 01       	movw	r22, r18
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_initpinn+0x1c0>
 2d4:	66 0f       	add	r22, r22
 2d6:	77 1f       	adc	r23, r23
 2d8:	8a 95       	dec	r24
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_initpinn+0x1bc>
 2dc:	cb 01       	movw	r24, r22
 2de:	96 2f       	mov	r25, r22
 2e0:	90 95       	com	r25
 2e2:	94 23       	and	r25, r20
 2e4:	94 bb       	out	0x14, r25	; 20
 2e6:	95 b3       	in	r25, 0x15	; 21
 2e8:	89 2b       	or	r24, r25
 2ea:	85 bb       	out	0x15, r24	; 21
 2ec:	08 95       	ret
 2ee:	41 b3       	in	r20, 0x11	; 17
 2f0:	21 e0       	ldi	r18, 0x01	; 1
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	b9 01       	movw	r22, r18
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_initpinn+0x1e4>
 2f8:	66 0f       	add	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	8a 95       	dec	r24
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_initpinn+0x1e0>
 300:	cb 01       	movw	r24, r22
 302:	96 2f       	mov	r25, r22
 304:	90 95       	com	r25
 306:	94 23       	and	r25, r20
 308:	91 bb       	out	0x11, r25	; 17
 30a:	92 b3       	in	r25, 0x12	; 18
 30c:	89 2b       	or	r24, r25
 30e:	82 bb       	out	0x12, r24	; 18
 310:	08 95       	ret

00000312 <DIO_togglepin>:
	{
	}
}
void  DIO_togglepin(EN_DIO_Pin_type pin)
{
	EN_DIO_Port_type port = pin/8 ;
 312:	98 2f       	mov	r25, r24
 314:	96 95       	lsr	r25
 316:	96 95       	lsr	r25
 318:	96 95       	lsr	r25
	Uchar8_t pin_num =pin % 8;
 31a:	87 70       	andi	r24, 0x07	; 7
	if (pin_num< 8)
	{
		switch(port)
 31c:	91 30       	cpi	r25, 0x01	; 1
 31e:	99 f0       	breq	.+38     	; 0x346 <DIO_togglepin+0x34>
 320:	28 f0       	brcs	.+10     	; 0x32c <DIO_togglepin+0x1a>
 322:	92 30       	cpi	r25, 0x02	; 2
 324:	e9 f0       	breq	.+58     	; 0x360 <DIO_togglepin+0x4e>
 326:	93 30       	cpi	r25, 0x03	; 3
 328:	41 f1       	breq	.+80     	; 0x37a <DIO_togglepin+0x68>
 32a:	08 95       	ret
		{
			case PA:
			TOGGLE_BIT(DIO_PORTA_PORT_REG,pin_num);
 32c:	4b b3       	in	r20, 0x1b	; 27
 32e:	21 e0       	ldi	r18, 0x01	; 1
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	b9 01       	movw	r22, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_togglepin+0x28>
 336:	66 0f       	add	r22, r22
 338:	77 1f       	adc	r23, r23
 33a:	8a 95       	dec	r24
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_togglepin+0x24>
 33e:	cb 01       	movw	r24, r22
 340:	84 27       	eor	r24, r20
 342:	8b bb       	out	0x1b, r24	; 27
			break;
 344:	08 95       	ret
			case PB:
			TOGGLE_BIT(DIO_PORTB_PORT_REG,pin_num);
 346:	48 b3       	in	r20, 0x18	; 24
 348:	21 e0       	ldi	r18, 0x01	; 1
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	b9 01       	movw	r22, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_togglepin+0x42>
 350:	66 0f       	add	r22, r22
 352:	77 1f       	adc	r23, r23
 354:	8a 95       	dec	r24
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_togglepin+0x3e>
 358:	cb 01       	movw	r24, r22
 35a:	84 27       	eor	r24, r20
 35c:	88 bb       	out	0x18, r24	; 24
			break;
 35e:	08 95       	ret
			case PC:
			TOGGLE_BIT(DIO_PORTC_PORT_REG,pin_num);
 360:	45 b3       	in	r20, 0x15	; 21
 362:	21 e0       	ldi	r18, 0x01	; 1
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	b9 01       	movw	r22, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_togglepin+0x5c>
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	8a 95       	dec	r24
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_togglepin+0x58>
 372:	cb 01       	movw	r24, r22
 374:	84 27       	eor	r24, r20
 376:	85 bb       	out	0x15, r24	; 21
			break;
 378:	08 95       	ret
			case PD:
			TOGGLE_BIT(DIO_PORTD_PORT_REG,pin_num);
 37a:	42 b3       	in	r20, 0x12	; 18
 37c:	21 e0       	ldi	r18, 0x01	; 1
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	b9 01       	movw	r22, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_togglepin+0x76>
 384:	66 0f       	add	r22, r22
 386:	77 1f       	adc	r23, r23
 388:	8a 95       	dec	r24
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_togglepin+0x72>
 38c:	cb 01       	movw	r24, r22
 38e:	84 27       	eor	r24, r20
 390:	82 bb       	out	0x12, r24	; 18
 392:	08 95       	ret

00000394 <UART_init>:
 }
 

  void uart_recive(Uchar16_t  u16_arr_size)
  {
	  g_u16_rx_char_size = 5;
 394:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <st_g_USARTconfig+0x2>
 398:	81 30       	cpi	r24, 0x01	; 1
 39a:	49 f0       	breq	.+18     	; 0x3ae <UART_init+0x1a>
 39c:	18 f0       	brcs	.+6      	; 0x3a4 <UART_init+0x10>
 39e:	82 30       	cpi	r24, 0x02	; 2
 3a0:	59 f0       	breq	.+22     	; 0x3b8 <UART_init+0x24>
 3a2:	0f c0       	rjmp	.+30     	; 0x3c2 <UART_init+0x2e>
 3a4:	8f ec       	ldi	r24, 0xCF	; 207
 3a6:	89 b9       	out	0x09, r24	; 9
 3a8:	10 bc       	out	0x20, r1	; 32
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0b c0       	rjmp	.+22     	; 0x3c4 <UART_init+0x30>
 3ae:	87 e6       	ldi	r24, 0x67	; 103
 3b0:	89 b9       	out	0x09, r24	; 9
 3b2:	10 bc       	out	0x20, r1	; 32
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	06 c0       	rjmp	.+12     	; 0x3c4 <UART_init+0x30>
 3b8:	10 bc       	out	0x20, r1	; 32
 3ba:	83 e3       	ldi	r24, 0x33	; 51
 3bc:	89 b9       	out	0x09, r24	; 9
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <UART_init+0x30>
 3c2:	82 e0       	ldi	r24, 0x02	; 2
 3c4:	9b b1       	in	r25, 0x0b	; 11
 3c6:	9d 7f       	andi	r25, 0xFD	; 253
 3c8:	9b b9       	out	0x0b, r25	; 11
 3ca:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <st_g_USARTconfig+0x4>
 3ce:	91 30       	cpi	r25, 0x01	; 1
 3d0:	21 f4       	brne	.+8      	; 0x3da <UART_init+0x46>
 3d2:	9a b1       	in	r25, 0x0a	; 10
 3d4:	90 68       	ori	r25, 0x80	; 128
 3d6:	9a b9       	out	0x0a, r25	; 10
 3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <UART_init+0x54>
 3da:	91 11       	cpse	r25, r1
 3dc:	04 c0       	rjmp	.+8      	; 0x3e6 <UART_init+0x52>
 3de:	9a b1       	in	r25, 0x0a	; 10
 3e0:	9f 77       	andi	r25, 0x7F	; 127
 3e2:	9a b9       	out	0x0a, r25	; 10
 3e4:	01 c0       	rjmp	.+2      	; 0x3e8 <UART_init+0x54>
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <st_g_USARTconfig+0x6>
 3ec:	91 30       	cpi	r25, 0x01	; 1
 3ee:	21 f4       	brne	.+8      	; 0x3f8 <UART_init+0x64>
 3f0:	9a b1       	in	r25, 0x0a	; 10
 3f2:	90 64       	ori	r25, 0x40	; 64
 3f4:	9a b9       	out	0x0a, r25	; 10
 3f6:	07 c0       	rjmp	.+14     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3f8:	91 11       	cpse	r25, r1
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fc:	9a b1       	in	r25, 0x0a	; 10
 3fe:	9f 7b       	andi	r25, 0xBF	; 191
 400:	9a b9       	out	0x0a, r25	; 10
 402:	01 c0       	rjmp	.+2      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <st_g_USARTconfig+0x3>
 40a:	91 30       	cpi	r25, 0x01	; 1
 40c:	21 f4       	brne	.+8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 40e:	9a b1       	in	r25, 0x0a	; 10
 410:	90 61       	ori	r25, 0x10	; 16
 412:	9a b9       	out	0x0a, r25	; 10
 414:	07 c0       	rjmp	.+14     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 416:	91 11       	cpse	r25, r1
 418:	04 c0       	rjmp	.+8      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41a:	9a b1       	in	r25, 0x0a	; 10
 41c:	9f 7e       	andi	r25, 0xEF	; 239
 41e:	9a b9       	out	0x0a, r25	; 10
 420:	01 c0       	rjmp	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 422:	82 e0       	ldi	r24, 0x02	; 2
 424:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <st_g_USARTconfig+0x5>
 428:	91 30       	cpi	r25, 0x01	; 1
 42a:	21 f4       	brne	.+8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 42c:	9a b1       	in	r25, 0x0a	; 10
 42e:	98 60       	ori	r25, 0x08	; 8
 430:	9a b9       	out	0x0a, r25	; 10
 432:	07 c0       	rjmp	.+14     	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 434:	91 11       	cpse	r25, r1
 436:	04 c0       	rjmp	.+8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 438:	9a b1       	in	r25, 0x0a	; 10
 43a:	97 7f       	andi	r25, 0xF7	; 247
 43c:	9a b9       	out	0x0a, r25	; 10
 43e:	01 c0       	rjmp	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <st_g_USARTconfig+0x1>
 446:	92 30       	cpi	r25, 0x02	; 2
 448:	69 f0       	breq	.+26     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 44a:	28 f4       	brcc	.+10     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 44c:	99 23       	and	r25, r25
 44e:	41 f0       	breq	.+16     	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 450:	91 30       	cpi	r25, 0x01	; 1
 452:	89 f0       	breq	.+34     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 454:	0d c0       	rjmp	.+26     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 456:	93 30       	cpi	r25, 0x03	; 3
 458:	39 f0       	breq	.+14     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 45a:	94 30       	cpi	r25, 0x04	; 4
 45c:	39 f0       	breq	.+14     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 45e:	08 c0       	rjmp	.+16     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	0a c0       	rjmp	.+20     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 464:	94 e0       	ldi	r25, 0x04	; 4
 466:	08 c0       	rjmp	.+16     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 468:	96 e0       	ldi	r25, 0x06	; 6
 46a:	06 c0       	rjmp	.+12     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 46c:	96 e0       	ldi	r25, 0x06	; 6
 46e:	04 c0       	rjmp	.+8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	01 c0       	rjmp	.+2      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 476:	92 e0       	ldi	r25, 0x02	; 2
 478:	81 11       	cpse	r24, r1
 47a:	02 c0       	rjmp	.+4      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 47c:	90 68       	ori	r25, 0x80	; 128
 47e:	90 bd       	out	0x20, r25	; 32
 480:	9f b7       	in	r25, 0x3f	; 63
 482:	90 68       	ori	r25, 0x80	; 128
 484:	9f bf       	out	0x3f, r25	; 63
 486:	08 95       	ret

00000488 <UART_sendString>:
 488:	70 93 e3 00 	sts	0x00E3, r23	; 0x8000e3 <g_u16_char_size+0x1>
 48c:	60 93 e2 00 	sts	0x00E2, r22	; 0x8000e2 <g_u16_char_size>
 490:	bc 01       	movw	r22, r24
 492:	84 ee       	ldi	r24, 0xE4	; 228
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	0e 94 73 03 	call	0x6e6	; 0x6e6 <strcpy>
 49a:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <buffer_index>
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	ec 51       	subi	r30, 0x1C	; 28
 4a2:	ff 4f       	sbci	r31, 0xFF	; 255
 4a4:	80 81       	ld	r24, Z
 4a6:	8c b9       	out	0x0c, r24	; 12
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	08 95       	ret

000004ac <uart_recive_callback>:
  }
void uart_recive_callback()
{ 	
f_g_RX;
 4ac:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <f_g_RX>
 4b0:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <f_g_RX+0x1>
 4b4:	08 95       	ret

000004b6 <uart_send_callback>:
}
void uart_send_callback()
{
f_g_TX;
 4b6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <f_g_TX>
 4ba:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <f_g_TX+0x1>
 4be:	08 95       	ret

000004c0 <UART_setCallBack>:
}

 EN_UART_status_t UART_setCallBack (Uchar8_t state,void (*ptr_func)(void))
 {
		if(ptr_func != nullPtr)
 4c0:	61 15       	cp	r22, r1
 4c2:	71 05       	cpc	r23, r1
 4c4:	79 f0       	breq	.+30     	; 0x4e4 <UART_setCallBack+0x24>
		{
	if (state==State_send)
 4c6:	81 11       	cpse	r24, r1
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <UART_setCallBack+0x14>
	{ 
		UART_callBack_send=ptr_func;
 4ca:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <UART_callBack_send+0x1>
 4ce:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <UART_callBack_send>
 4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <UART_setCallBack+0x20>
		
	}else 
	if(state==State_recive)
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	21 f4       	brne	.+8      	; 0x4e0 <UART_setCallBack+0x20>
		
			{
				UART_callBack_recive = ptr_func;
 4d8:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <__data_end+0x1>
 4dc:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <__data_end>
		}
		
			EN_UART_status_t returnValue = UART_OK;
	 return returnValue;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	08 95       	ret
 }
 
		}
 4e4:	08 95       	ret

000004e6 <__vector_15>:

ISR(USART_TXC)
{
 4e6:	1f 92       	push	r1
 4e8:	0f 92       	push	r0
 4ea:	0f b6       	in	r0, 0x3f	; 63
 4ec:	0f 92       	push	r0
 4ee:	11 24       	eor	r1, r1
 4f0:	2f 93       	push	r18
 4f2:	3f 93       	push	r19
 4f4:	4f 93       	push	r20
 4f6:	5f 93       	push	r21
 4f8:	6f 93       	push	r22
 4fa:	7f 93       	push	r23
 4fc:	8f 93       	push	r24
 4fe:	9f 93       	push	r25
 500:	af 93       	push	r26
 502:	bf 93       	push	r27
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
 508:	ef 93       	push	r30
 50a:	ff 93       	push	r31
	static Uchar16_t u16_size_counter = 1;


	if(u16_size_counter <= g_u16_char_size  && arr_g_recieveBuffer[u16_size_counter] != '\0' )
 50c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 510:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 514:	20 91 e2 00 	lds	r18, 0x00E2	; 0x8000e2 <g_u16_char_size>
 518:	30 91 e3 00 	lds	r19, 0x00E3	; 0x8000e3 <g_u16_char_size+0x1>
 51c:	28 17       	cp	r18, r24
 51e:	39 07       	cpc	r19, r25
 520:	a8 f0       	brcs	.+42     	; 0x54c <__vector_15+0x66>
 522:	fc 01       	movw	r30, r24
 524:	ec 51       	subi	r30, 0x1C	; 28
 526:	ff 4f       	sbci	r31, 0xFF	; 255
 528:	20 81       	ld	r18, Z
 52a:	22 23       	and	r18, r18
 52c:	79 f0       	breq	.+30     	; 0x54c <__vector_15+0x66>
	{
		UDR = arr_g_recieveBuffer[u16_size_counter];
 52e:	fc 01       	movw	r30, r24
 530:	ec 51       	subi	r30, 0x1C	; 28
 532:	ff 4f       	sbci	r31, 0xFF	; 255
 534:	80 81       	ld	r24, Z
 536:	8c b9       	out	0x0c, r24	; 12
		u16_size_counter++;
 538:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 53c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 540:	01 96       	adiw	r24, 0x01	; 1
 542:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 546:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 54a:	0f c0       	rjmp	.+30     	; 0x56a <__vector_15+0x84>
	}
	else
	{f_g_TX=1;
 54c:	c1 e0       	ldi	r28, 0x01	; 1
 54e:	d0 e0       	ldi	r29, 0x00	; 0
 550:	d0 93 75 00 	sts	0x0075, r29	; 0x800075 <f_g_TX+0x1>
 554:	c0 93 74 00 	sts	0x0074, r28	; 0x800074 <f_g_TX>

				UART_callBack_send();
 558:	e0 91 72 00 	lds	r30, 0x0072	; 0x800072 <UART_callBack_send>
 55c:	f0 91 73 00 	lds	r31, 0x0073	; 0x800073 <UART_callBack_send+0x1>
 560:	09 95       	icall
		u16_size_counter = 1 ;
 562:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 566:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__DATA_REGION_ORIGIN__>


	}
	
	
}
 56a:	ff 91       	pop	r31
 56c:	ef 91       	pop	r30
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	bf 91       	pop	r27
 574:	af 91       	pop	r26
 576:	9f 91       	pop	r25
 578:	8f 91       	pop	r24
 57a:	7f 91       	pop	r23
 57c:	6f 91       	pop	r22
 57e:	5f 91       	pop	r21
 580:	4f 91       	pop	r20
 582:	3f 91       	pop	r19
 584:	2f 91       	pop	r18
 586:	0f 90       	pop	r0
 588:	0f be       	out	0x3f, r0	; 63
 58a:	0f 90       	pop	r0
 58c:	1f 90       	pop	r1
 58e:	18 95       	reti

00000590 <__vector_13>:


ISR(USART_RXC)
{
 590:	1f 92       	push	r1
 592:	0f 92       	push	r0
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	0f 92       	push	r0
 598:	11 24       	eor	r1, r1
 59a:	2f 93       	push	r18
 59c:	3f 93       	push	r19
 59e:	4f 93       	push	r20
 5a0:	5f 93       	push	r21
 5a2:	6f 93       	push	r22
 5a4:	7f 93       	push	r23
 5a6:	8f 93       	push	r24
 5a8:	9f 93       	push	r25
 5aa:	af 93       	push	r26
 5ac:	bf 93       	push	r27
 5ae:	ef 93       	push	r30
 5b0:	ff 93       	push	r31
	if(buffer_index <= g_u16_rx_char_size)
 5b2:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <buffer_index>
 5b6:	2e 2f       	mov	r18, r30
 5b8:	30 e0       	ldi	r19, 0x00	; 0
 5ba:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <g_u16_rx_char_size>
 5be:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <g_u16_rx_char_size+0x1>
 5c2:	82 17       	cp	r24, r18
 5c4:	93 07       	cpc	r25, r19
 5c6:	48 f0       	brcs	.+18     	; 0x5da <__vector_13+0x4a>
	{
		arr_g_recieveBuffer[buffer_index] = UDR;
 5c8:	d9 01       	movw	r26, r18
 5ca:	8c b1       	in	r24, 0x0c	; 12
 5cc:	ac 51       	subi	r26, 0x1C	; 28
 5ce:	bf 4f       	sbci	r27, 0xFF	; 255
 5d0:	8c 93       	st	X, r24
		buffer_index++;
 5d2:	ef 5f       	subi	r30, 0xFF	; 255
 5d4:	e0 93 7a 00 	sts	0x007A, r30	; 0x80007a <buffer_index>
 5d8:	11 c0       	rjmp	.+34     	; 0x5fc <__vector_13+0x6c>

	}
	else
	{
		arr_g_recieveBuffer[buffer_index] = '\0' ;
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	ec 51       	subi	r30, 0x1C	; 28
 5de:	ff 4f       	sbci	r31, 0xFF	; 255
 5e0:	10 82       	st	Z, r1
		buffer_index = 0;
 5e2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <buffer_index>
		f_g_RX=1;
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <f_g_RX+0x1>
 5ee:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <f_g_RX>

		UART_callBack_recive();
 5f2:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <__data_end>
 5f6:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <__data_end+0x1>
 5fa:	09 95       	icall

	}
 5fc:	ff 91       	pop	r31
 5fe:	ef 91       	pop	r30
 600:	bf 91       	pop	r27
 602:	af 91       	pop	r26
 604:	9f 91       	pop	r25
 606:	8f 91       	pop	r24
 608:	7f 91       	pop	r23
 60a:	6f 91       	pop	r22
 60c:	5f 91       	pop	r21
 60e:	4f 91       	pop	r20
 610:	3f 91       	pop	r19
 612:	2f 91       	pop	r18
 614:	0f 90       	pop	r0
 616:	0f be       	out	0x3f, r0	; 63
 618:	0f 90       	pop	r0
 61a:	1f 90       	pop	r1
 61c:	18 95       	reti

0000061e <bcm_init>:
	 break;
	 default:
	 returnerro = BCM_STATUS_ERROR;
			 }
			 return returnerro;
 }
 61e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <bcm_config>
 622:	88 23       	and	r24, r24
 624:	21 f0       	breq	.+8      	; 0x62e <bcm_init+0x10>
 626:	83 30       	cpi	r24, 0x03	; 3
 628:	80 f4       	brcc	.+32     	; 0x64a <bcm_init+0x2c>
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	08 95       	ret
 62e:	0e 94 ca 01 	call	0x394	; 0x394 <UART_init>
 632:	6b e5       	ldi	r22, 0x5B	; 91
 634:	72 e0       	ldi	r23, 0x02	; 2
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	0e 94 60 02 	call	0x4c0	; 0x4c0 <UART_setCallBack>
 63c:	66 e5       	ldi	r22, 0x56	; 86
 63e:	72 e0       	ldi	r23, 0x02	; 2
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	0e 94 60 02 	call	0x4c0	; 0x4c0 <UART_setCallBack>
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	08 95       	ret
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	08 95       	ret

0000064e <bcm_send_n>:
 bcm_status_t bcm_send_n(bcm_instance_t* bcm_instance, Uchar8_t* data, Uchar16_t length)
 {
  	  bcm_status_t returnerro =BCM_STATUS_SUCCESS;
  	  switch (bcm_config.DEVICE)
 64e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <bcm_config>
 652:	99 23       	and	r25, r25
 654:	21 f0       	breq	.+8      	; 0x65e <bcm_send_n+0x10>
 656:	93 30       	cpi	r25, 0x03	; 3
 658:	40 f4       	brcc	.+16     	; 0x66a <bcm_send_n+0x1c>
			 }
			 return returnerro;
 }
 bcm_status_t bcm_send_n(bcm_instance_t* bcm_instance, Uchar8_t* data, Uchar16_t length)
 {
  	  bcm_status_t returnerro =BCM_STATUS_SUCCESS;
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	08 95       	ret
 65e:	cb 01       	movw	r24, r22
  	  switch (bcm_config.DEVICE)
  	  {
	  	  case UART_DEVICE :
		UART_sendString(data,length);
 660:	ba 01       	movw	r22, r20
 662:	0e 94 44 02 	call	0x488	; 0x488 <UART_sendString>
			 }
			 return returnerro;
 }
 bcm_status_t bcm_send_n(bcm_instance_t* bcm_instance, Uchar8_t* data, Uchar16_t length)
 {
  	  bcm_status_t returnerro =BCM_STATUS_SUCCESS;
 666:	80 e0       	ldi	r24, 0x00	; 0
  	  switch (bcm_config.DEVICE)
  	  {
	  	  case UART_DEVICE :
		UART_sendString(data,length);
	  	  break;
 668:	08 95       	ret
	  	  case SPI_DEVICE:
	  	  break;
	  	  case I2C_DEVICE:
	  	  break;
	  	  default:
	  	  returnerro = BCM_STATUS_ERROR;
 66a:	81 e0       	ldi	r24, 0x01	; 1
  	  }
  	  return returnerro;
    }
 66c:	08 95       	ret

0000066e <bcm_dispatcher>:
  

bcm_status_t bcm_dispatcher(bcm_instance_t* bcm_instance)
{
	  bcm_status_t returnerro =BCM_STATUS_SUCCESS;
	  switch (bcm_config.DEVICE)
 66e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <bcm_config>
 672:	88 23       	and	r24, r24
 674:	21 f0       	breq	.+8      	; 0x67e <bcm_dispatcher+0x10>
 676:	83 30       	cpi	r24, 0x03	; 3
 678:	90 f5       	brcc	.+100    	; 0x6de <bcm_dispatcher+0x70>
    }
  

bcm_status_t bcm_dispatcher(bcm_instance_t* bcm_instance)
{
	  bcm_status_t returnerro =BCM_STATUS_SUCCESS;
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	08 95       	ret
	  switch (bcm_config.DEVICE)
	  {

		  case UART_DEVICE :
	
		if (f_g_RX==1)
 67e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <f_g_RX>
 682:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <f_g_RX+0x1>
 686:	01 97       	sbiw	r24, 0x01	; 1
 688:	91 f4       	brne	.+36     	; 0x6ae <bcm_dispatcher+0x40>
 68a:	2f ef       	ldi	r18, 0xFF	; 255
 68c:	83 ed       	ldi	r24, 0xD3	; 211
 68e:	90 e3       	ldi	r25, 0x30	; 48
 690:	21 50       	subi	r18, 0x01	; 1
 692:	80 40       	sbci	r24, 0x00	; 0
 694:	90 40       	sbci	r25, 0x00	; 0
 696:	e1 f7       	brne	.-8      	; 0x690 <bcm_dispatcher+0x22>
 698:	00 c0       	rjmp	.+0      	; 0x69a <bcm_dispatcher+0x2c>
 69a:	00 00       	nop
		{                 _delay_ms(2000);

                 DIO_togglepin(LED0);
 69c:	84 e0       	ldi	r24, 0x04	; 4
 69e:	0e 94 89 01 	call	0x312	; 0x312 <DIO_togglepin>
                 f_g_RX=0;
 6a2:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <f_g_RX+0x1>
 6a6:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <f_g_RX>
    }
  

bcm_status_t bcm_dispatcher(bcm_instance_t* bcm_instance)
{
	  bcm_status_t returnerro =BCM_STATUS_SUCCESS;
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	08 95       	ret

                 DIO_togglepin(LED0);
                 f_g_RX=0;
		}
		else 
		if (f_g_TX==1)
 6ae:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <f_g_TX>
 6b2:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <f_g_TX+0x1>
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	a1 f4       	brne	.+40     	; 0x6e2 <bcm_dispatcher+0x74>
 6ba:	2f ef       	ldi	r18, 0xFF	; 255
 6bc:	83 ed       	ldi	r24, 0xD3	; 211
 6be:	90 e3       	ldi	r25, 0x30	; 48
 6c0:	21 50       	subi	r18, 0x01	; 1
 6c2:	80 40       	sbci	r24, 0x00	; 0
 6c4:	90 40       	sbci	r25, 0x00	; 0
 6c6:	e1 f7       	brne	.-8      	; 0x6c0 <bcm_dispatcher+0x52>
 6c8:	00 c0       	rjmp	.+0      	; 0x6ca <bcm_dispatcher+0x5c>
 6ca:	00 00       	nop
		{		_delay_ms(2000);

		DIO_togglepin(LED1);
 6cc:	85 e0       	ldi	r24, 0x05	; 5
 6ce:	0e 94 89 01 	call	0x312	; 0x312 <DIO_togglepin>
		f_g_TX=0;
 6d2:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <f_g_TX+0x1>
 6d6:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <f_g_TX>
    }
  

bcm_status_t bcm_dispatcher(bcm_instance_t* bcm_instance)
{
	  bcm_status_t returnerro =BCM_STATUS_SUCCESS;
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	08 95       	ret
		  case SPI_DEVICE:
		  break;
		  case I2C_DEVICE:
		  break;
		  default:
		  returnerro = BCM_STATUS_ERROR;
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	08 95       	ret
    }
  

bcm_status_t bcm_dispatcher(bcm_instance_t* bcm_instance)
{
	  bcm_status_t returnerro =BCM_STATUS_SUCCESS;
 6e2:	80 e0       	ldi	r24, 0x00	; 0
		  break;
		  default:
		  returnerro = BCM_STATUS_ERROR;
	  }
	  return returnerro;
 6e4:	08 95       	ret

000006e6 <strcpy>:
 6e6:	fb 01       	movw	r30, r22
 6e8:	dc 01       	movw	r26, r24
 6ea:	01 90       	ld	r0, Z+
 6ec:	0d 92       	st	X+, r0
 6ee:	00 20       	and	r0, r0
 6f0:	e1 f7       	brne	.-8      	; 0x6ea <strcpy+0x4>
 6f2:	08 95       	ret

000006f4 <_exit>:
 6f4:	f8 94       	cli

000006f6 <__stop_program>:
 6f6:	ff cf       	rjmp	.-2      	; 0x6f6 <__stop_program>

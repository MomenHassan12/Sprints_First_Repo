
LED_sequence3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000b12  00000ba6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800062  00800062  00000ba8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ba8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001818  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a3c  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ed4  00000000  00000000  00002fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  00003ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c9  00000000  00000000  00004264  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fa3  00000000  00000000  00004a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000059d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__vector_1>
   8:	0c 94 ff 03 	jmp	0x7fe	; 0x7fe <__vector_2>
   c:	0c 94 28 04 	jmp	0x850	; 0x850 <__vector_3>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__vector_10>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	e6 00       	.word	0x00e6	; ????
  56:	f7 00       	.word	0x00f7	; ????
  58:	08 01       	movw	r0, r16
  5a:	19 01       	movw	r2, r18
  5c:	2a 01       	movw	r4, r20
  5e:	3b 01       	movw	r6, r22
  60:	4c 01       	movw	r8, r24
  62:	5d 01       	movw	r10, r26

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e2 e1       	ldi	r30, 0x12	; 18
  78:	fb e0       	ldi	r31, 0x0B	; 11
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a2 e6       	ldi	r26, 0x62	; 98
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	aa 37       	cpi	r26, 0x7A	; 122
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 2e 02 	call	0x45c	; 0x45c <main>
  9a:	0c 94 87 05 	jmp	0xb0e	; 0xb0e <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <button_1_Task>:

}

void button_1_Task(void)
{
	switch (blinkMode)
  a2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <blinkMode>
  a6:	82 30       	cpi	r24, 0x02	; 2
  a8:	e9 f0       	breq	.+58     	; 0xe4 <button_1_Task+0x42>
  aa:	28 f4       	brcc	.+10     	; 0xb6 <button_1_Task+0x14>
  ac:	88 23       	and	r24, r24
  ae:	41 f0       	breq	.+16     	; 0xc0 <button_1_Task+0x1e>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	79 f0       	breq	.+30     	; 0xd2 <button_1_Task+0x30>
  b4:	08 95       	ret
  b6:	83 30       	cpi	r24, 0x03	; 3
  b8:	f1 f0       	breq	.+60     	; 0xf6 <button_1_Task+0x54>
  ba:	84 30       	cpi	r24, 0x04	; 4
  bc:	29 f1       	breq	.+74     	; 0x108 <button_1_Task+0x66>
  be:	08 95       	ret
	{
		case BLINK_1:	timeOn = 1;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timeOn>
		 timeOff = 9;
  c6:	99 e0       	ldi	r25, 0x09	; 9
  c8:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
		 	blinkMode = BLINK_2;
  cc:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <blinkMode>
			 	break;
  d0:	08 95       	ret
		case BLINK_2:	timeOn = 2;
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timeOn>
			timeOff = 8;
  d8:	98 e0       	ldi	r25, 0x08	; 8
  da:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
				blinkMode = BLINK_3;
  de:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <blinkMode>
					break;
  e2:	08 95       	ret
		case BLINK_3:	
		timeOn = 3;
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timeOn>
			timeOff = 7;	
  ea:	97 e0       	ldi	r25, 0x07	; 7
  ec:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
			blinkMode = BLINK_4;	
  f0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <blinkMode>
			break;
  f4:	08 95       	ret
		case BLINK_4:	timeOn = 5;
  f6:	85 e0       	ldi	r24, 0x05	; 5
  f8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timeOn>
			timeOff = 5;	
  fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			blinkMode = BLINK_5;	
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <blinkMode>
			break;
 106:	08 95       	ret
		case BLINK_5:	timeOn = 8;	
 108:	88 e0       	ldi	r24, 0x08	; 8
 10a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <timeOn>
		timeOff = 2;	
 10e:	82 e0       	ldi	r24, 0x02	; 2
 110:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		blinkMode = BLINK_1;	
 114:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <blinkMode>
 118:	08 95       	ret

0000011a <APP_initModules>:


void APP_initModules(void)
{
	
	BUTTON_init(BUTTON_0_PORT, BUTTON_0_Pin);
 11a:	60 e0       	ldi	r22, 0x00	; 0
 11c:	84 e4       	ldi	r24, 0x44	; 68
 11e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <BUTTON_init>
	BUTTON_init(BUTTON_1_PORT, BUTTON_1_Pin);
 122:	62 e0       	ldi	r22, 0x02	; 2
 124:	84 e4       	ldi	r24, 0x44	; 68
 126:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <BUTTON_init>
	LED_init(LED_0_PORT, LED_0_PIN);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	81 e4       	ldi	r24, 0x41	; 65
 12e:	0e 94 07 02 	call	0x40e	; 0x40e <LED_init>
	LED_init(LED_1_PORT, LED_1_PIN);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	81 e4       	ldi	r24, 0x41	; 65
 136:	0e 94 07 02 	call	0x40e	; 0x40e <LED_init>
	LED_init(LED_2_PORT, LED_2_PIN);
 13a:	62 e0       	ldi	r22, 0x02	; 2
 13c:	81 e4       	ldi	r24, 0x41	; 65
 13e:	0e 94 07 02 	call	0x40e	; 0x40e <LED_init>
	LED_init(LED_3_PORT, LED_3_PIN);
 142:	63 e0       	ldi	r22, 0x03	; 3
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	0e 94 07 02 	call	0x40e	; 0x40e <LED_init>
	LED_off(LED_0_PORT, LED_0_PIN);
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	81 e4       	ldi	r24, 0x41	; 65
 14e:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
	LED_off(LED_1_PORT, LED_1_PIN);
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
	LED_off(LED_2_PORT, LED_2_PIN);
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	81 e4       	ldi	r24, 0x41	; 65
 15e:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
	LED_off(LED_3_PORT, LED_3_PIN);
 162:	63 e0       	ldi	r22, 0x03	; 3
 164:	81 e4       	ldi	r24, 0x41	; 65
 166:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
	
	EXTINT_Init(INT0);
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	0e 94 8a 03 	call	0x714	; 0x714 <EXTINT_Init>
	EXTINT_setCallBackInt(INT0, button_1_Task);
 170:	61 e5       	ldi	r22, 0x51	; 81
 172:	70 e0       	ldi	r23, 0x00	; 0
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	0e 94 be 03 	call	0x77c	; 0x77c <EXTINT_setCallBackInt>
	
	TIMER_init(TIMER_0);
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	0e 94 51 04 	call	0x8a2	; 0x8a2 <TIMER_init>
	TIMER_setTime(TIMER_0, 100);
 180:	44 e6       	ldi	r20, 0x64	; 100
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <TIMER_setTime>
	TIMER_setCallBack(TIMER_0, sysTickTask);
 18e:	6a eb       	ldi	r22, 0xBA	; 186
 190:	71 e0       	ldi	r23, 0x01	; 1
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <TIMER_setCallBack>
	TIMER_start(TIMER_0);
 198:	80 e0       	ldi	r24, 0x00	; 0
 19a:	0e 94 c5 04 	call	0x98a	; 0x98a <TIMER_start>
 19e:	08 95       	ret

000001a0 <button_0_Task>:
		}
	}
}

void button_0_Task (uint8_t* counter, uint8_t state)
{
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	ec 01       	movw	r28, r24
	switch (state)
 1a6:	66 23       	and	r22, r22
 1a8:	21 f0       	breq	.+8      	; 0x1b2 <button_0_Task+0x12>
 1aa:	61 30       	cpi	r22, 0x01	; 1
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <button_0_Task+0x10>
 1ae:	97 c0       	rjmp	.+302    	; 0x2de <button_0_Task+0x13e>
 1b0:	a6 c0       	rjmp	.+332    	; 0x2fe <button_0_Task+0x15e>
	{
		case TURN_ON:
		switch(*counter)
 1b2:	e8 81       	ld	r30, Y
 1b4:	8e 2f       	mov	r24, r30
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	fc 01       	movw	r30, r24
 1ba:	31 97       	sbiw	r30, 0x01	; 1
 1bc:	e8 30       	cpi	r30, 0x08	; 8
 1be:	f1 05       	cpc	r31, r1
 1c0:	08 f0       	brcs	.+2      	; 0x1c4 <button_0_Task+0x24>
 1c2:	9d c0       	rjmp	.+314    	; 0x2fe <button_0_Task+0x15e>
 1c4:	e6 5d       	subi	r30, 0xD6	; 214
 1c6:	ff 4f       	sbci	r31, 0xFF	; 255
 1c8:	0c 94 67 05 	jmp	0xace	; 0xace <__tablejump2__>
		{
			case 1:
			LED_on(LED_0_PORT, LED_0_PIN);
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	81 e4       	ldi	r24, 0x41	; 65
 1d0:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			LED_off(LED_1_PORT, LED_1_PIN);
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	81 e4       	ldi	r24, 0x41	; 65
 1d8:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			LED_off(LED_2_PORT, LED_2_PIN);
 1dc:	62 e0       	ldi	r22, 0x02	; 2
 1de:	81 e4       	ldi	r24, 0x41	; 65
 1e0:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			LED_off(LED_3_PORT, LED_3_PIN);
 1e4:	63 e0       	ldi	r22, 0x03	; 3
 1e6:	81 e4       	ldi	r24, 0x41	; 65
 1e8:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			break;
 1ec:	88 c0       	rjmp	.+272    	; 0x2fe <button_0_Task+0x15e>
			
			case 2:
			LED_on(LED_0_PORT, LED_0_PIN);
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	81 e4       	ldi	r24, 0x41	; 65
 1f2:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			LED_on(LED_1_PORT, LED_1_PIN);
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	81 e4       	ldi	r24, 0x41	; 65
 1fa:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			LED_off(LED_2_PORT, LED_2_PIN);
 1fe:	62 e0       	ldi	r22, 0x02	; 2
 200:	81 e4       	ldi	r24, 0x41	; 65
 202:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			LED_off(LED_3_PORT, LED_3_PIN);
 206:	63 e0       	ldi	r22, 0x03	; 3
 208:	81 e4       	ldi	r24, 0x41	; 65
 20a:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			break;
 20e:	77 c0       	rjmp	.+238    	; 0x2fe <button_0_Task+0x15e>
			
			case 3:
			LED_on(LED_0_PORT, LED_0_PIN);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	81 e4       	ldi	r24, 0x41	; 65
 214:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			LED_on(LED_1_PORT, LED_1_PIN);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	81 e4       	ldi	r24, 0x41	; 65
 21c:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			LED_on(LED_2_PORT, LED_2_PIN);
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	81 e4       	ldi	r24, 0x41	; 65
 224:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			LED_off(LED_3_PORT, LED_3_PIN);
 228:	63 e0       	ldi	r22, 0x03	; 3
 22a:	81 e4       	ldi	r24, 0x41	; 65
 22c:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			break;
 230:	66 c0       	rjmp	.+204    	; 0x2fe <button_0_Task+0x15e>
			
			case 4:
			LED_on(LED_0_PORT, LED_0_PIN);
 232:	60 e0       	ldi	r22, 0x00	; 0
 234:	81 e4       	ldi	r24, 0x41	; 65
 236:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			LED_on(LED_1_PORT, LED_1_PIN);
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	81 e4       	ldi	r24, 0x41	; 65
 23e:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			LED_on(LED_2_PORT, LED_2_PIN);
 242:	62 e0       	ldi	r22, 0x02	; 2
 244:	81 e4       	ldi	r24, 0x41	; 65
 246:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			LED_on(LED_3_PORT, LED_3_PIN);
 24a:	63 e0       	ldi	r22, 0x03	; 3
 24c:	81 e4       	ldi	r24, 0x41	; 65
 24e:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			break;
 252:	55 c0       	rjmp	.+170    	; 0x2fe <button_0_Task+0x15e>
			
			case 5:
			LED_off(LED_0_PORT, LED_0_PIN);
 254:	60 e0       	ldi	r22, 0x00	; 0
 256:	81 e4       	ldi	r24, 0x41	; 65
 258:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			LED_on(LED_1_PORT, LED_1_PIN);
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	81 e4       	ldi	r24, 0x41	; 65
 260:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			LED_on(LED_2_PORT, LED_2_PIN);
 264:	62 e0       	ldi	r22, 0x02	; 2
 266:	81 e4       	ldi	r24, 0x41	; 65
 268:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			LED_on(LED_3_PORT, LED_3_PIN);
 26c:	63 e0       	ldi	r22, 0x03	; 3
 26e:	81 e4       	ldi	r24, 0x41	; 65
 270:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			break;
 274:	44 c0       	rjmp	.+136    	; 0x2fe <button_0_Task+0x15e>
			
			case 6:
			LED_off(LED_0_PORT, LED_0_PIN);
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	81 e4       	ldi	r24, 0x41	; 65
 27a:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			LED_off(LED_1_PORT, LED_1_PIN);
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	81 e4       	ldi	r24, 0x41	; 65
 282:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			LED_on(LED_2_PORT, LED_2_PIN);
 286:	62 e0       	ldi	r22, 0x02	; 2
 288:	81 e4       	ldi	r24, 0x41	; 65
 28a:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			LED_on(LED_3_PORT, LED_3_PIN);
 28e:	63 e0       	ldi	r22, 0x03	; 3
 290:	81 e4       	ldi	r24, 0x41	; 65
 292:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			break;
 296:	33 c0       	rjmp	.+102    	; 0x2fe <button_0_Task+0x15e>
			
			case 7:
			LED_off(LED_0_PORT, LED_0_PIN);
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	81 e4       	ldi	r24, 0x41	; 65
 29c:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			LED_off(LED_1_PORT, LED_1_PIN);
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	81 e4       	ldi	r24, 0x41	; 65
 2a4:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			LED_off(LED_2_PORT, LED_2_PIN);
 2a8:	62 e0       	ldi	r22, 0x02	; 2
 2aa:	81 e4       	ldi	r24, 0x41	; 65
 2ac:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			LED_on(LED_3_PORT, LED_3_PIN);
 2b0:	63 e0       	ldi	r22, 0x03	; 3
 2b2:	81 e4       	ldi	r24, 0x41	; 65
 2b4:	0e 94 14 02 	call	0x428	; 0x428 <LED_on>
			break;
 2b8:	22 c0       	rjmp	.+68     	; 0x2fe <button_0_Task+0x15e>
			
			case 8:
			LED_off(LED_0_PORT, LED_0_PIN);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	81 e4       	ldi	r24, 0x41	; 65
 2be:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			LED_off(LED_1_PORT, LED_1_PIN);
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	81 e4       	ldi	r24, 0x41	; 65
 2c6:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			LED_off(LED_2_PORT, LED_2_PIN);
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	81 e4       	ldi	r24, 0x41	; 65
 2ce:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			LED_off(LED_3_PORT, LED_3_PIN);
 2d2:	63 e0       	ldi	r22, 0x03	; 3
 2d4:	81 e4       	ldi	r24, 0x41	; 65
 2d6:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
			*counter = 0;	break;
 2da:	18 82       	st	Y, r1
 2dc:	10 c0       	rjmp	.+32     	; 0x2fe <button_0_Task+0x15e>
			
		}
		break;
		
		case TURN_OFF:
		LED_off(LED_0_PORT, LED_0_PIN);
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	81 e4       	ldi	r24, 0x41	; 65
 2e2:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
		LED_off(LED_1_PORT, LED_1_PIN);
 2e6:	61 e0       	ldi	r22, 0x01	; 1
 2e8:	81 e4       	ldi	r24, 0x41	; 65
 2ea:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
		LED_off(LED_2_PORT, LED_2_PIN);
 2ee:	62 e0       	ldi	r22, 0x02	; 2
 2f0:	81 e4       	ldi	r24, 0x41	; 65
 2f2:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
		LED_off(LED_3_PORT, LED_3_PIN);
 2f6:	63 e0       	ldi	r22, 0x03	; 3
 2f8:	81 e4       	ldi	r24, 0x41	; 65
 2fa:	0e 94 21 02 	call	0x442	; 0x442 <LED_off>
		
		default:
		break;
	}

}
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	08 95       	ret

00000304 <APP_ledSequenceV_3>:
	TIMER_setCallBack(TIMER_0, sysTickTask);
	TIMER_start(TIMER_0);
	
}
void APP_ledSequenceV_3 (void)
{
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
 308:	1f 92       	push	r1
 30a:	cd b7       	in	r28, 0x3d	; 61
 30c:	de b7       	in	r29, 0x3e	; 62
	while (1)
	{
		
		uint8_t button0State = 0;
 30e:	19 82       	std	Y+1, r1	; 0x01
		BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &button0State);
 310:	ae 01       	movw	r20, r28
 312:	4f 5f       	subi	r20, 0xFF	; 255
 314:	5f 4f       	sbci	r21, 0xFF	; 255
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	84 e4       	ldi	r24, 0x44	; 68
 31a:	0e 94 00 02 	call	0x400	; 0x400 <BUTTON_read>
		if (button0State)
 31e:	89 81       	ldd	r24, Y+1	; 0x01
 320:	88 23       	and	r24, r24
 322:	a9 f3       	breq	.-22     	; 0x30e <APP_ledSequenceV_3+0xa>
		{
			//_delay_ms(60);
			BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &button0State);
 324:	ae 01       	movw	r20, r28
 326:	4f 5f       	subi	r20, 0xFF	; 255
 328:	5f 4f       	sbci	r21, 0xFF	; 255
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	84 e4       	ldi	r24, 0x44	; 68
 32e:	0e 94 00 02 	call	0x400	; 0x400 <BUTTON_read>
			if(button0State)
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	88 23       	and	r24, r24
 336:	59 f3       	breq	.-42     	; 0x30e <APP_ledSequenceV_3+0xa>
			{
				BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &button0State);
 338:	ae 01       	movw	r20, r28
 33a:	4f 5f       	subi	r20, 0xFF	; 255
 33c:	5f 4f       	sbci	r21, 0xFF	; 255
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	84 e4       	ldi	r24, 0x44	; 68
 342:	0e 94 00 02 	call	0x400	; 0x400 <BUTTON_read>
				counter++;
 346:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <counter>
 34a:	8f 5f       	subi	r24, 0xFF	; 255
 34c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <counter>
				button_0_Task(&counter, state);
 350:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <__data_end>
 354:	84 e6       	ldi	r24, 0x64	; 100
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <button_0_Task>
				while(button0State)
 35c:	07 c0       	rjmp	.+14     	; 0x36c <APP_ledSequenceV_3+0x68>
				{
					BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &button0State);
 35e:	ae 01       	movw	r20, r28
 360:	4f 5f       	subi	r20, 0xFF	; 255
 362:	5f 4f       	sbci	r21, 0xFF	; 255
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	84 e4       	ldi	r24, 0x44	; 68
 368:	0e 94 00 02 	call	0x400	; 0x400 <BUTTON_read>
			if(button0State)
			{
				BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &button0State);
				counter++;
				button_0_Task(&counter, state);
				while(button0State)
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	81 11       	cpse	r24, r1
 370:	f6 cf       	rjmp	.-20     	; 0x35e <APP_ledSequenceV_3+0x5a>
 372:	cd cf       	rjmp	.-102    	; 0x30e <APP_ledSequenceV_3+0xa>

00000374 <sysTickTask>:
}


void sysTickTask (void)
{
	if (tickNumber < timeOn)
 374:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <tickNumber>
 378:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <timeOn>
 37c:	28 17       	cp	r18, r24
 37e:	68 f4       	brcc	.+26     	; 0x39a <sysTickTask+0x26>
	{
		button_0_Task(&counter, TURN_ON);
 380:	60 e0       	ldi	r22, 0x00	; 0
 382:	84 e6       	ldi	r24, 0x64	; 100
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <button_0_Task>
		state = TURN_ON;
 38a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		tickNumber++;
 38e:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <tickNumber>
 392:	8f 5f       	subi	r24, 0xFF	; 255
 394:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <tickNumber>
 398:	08 95       	ret
	}
	else if (tickNumber >= timeOn && tickNumber < (timeOn+timeOff))
 39a:	28 17       	cp	r18, r24
 39c:	18 f1       	brcs	.+70     	; 0x3e4 <sysTickTask+0x70>
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	40 91 60 00 	lds	r20, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	84 0f       	add	r24, r20
 3a8:	91 1d       	adc	r25, r1
 3aa:	28 17       	cp	r18, r24
 3ac:	39 07       	cpc	r19, r25
 3ae:	d4 f4       	brge	.+52     	; 0x3e4 <sysTickTask+0x70>
	{
		button_0_Task(&counter, TURN_OFF);
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	84 e6       	ldi	r24, 0x64	; 100
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <button_0_Task>
		state = TURN_OFF;
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		tickNumber++;
 3c0:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <tickNumber>
 3c4:	8f 5f       	subi	r24, 0xFF	; 255
 3c6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <tickNumber>
		if (tickNumber >= (timeOn + timeOff))
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <timeOn>
 3d0:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	24 0f       	add	r18, r20
 3d8:	31 1d       	adc	r19, r1
 3da:	82 17       	cp	r24, r18
 3dc:	93 07       	cpc	r25, r19
 3de:	14 f0       	brlt	.+4      	; 0x3e4 <sysTickTask+0x70>
		{
			tickNumber = 0;
 3e0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <tickNumber>
 3e4:	08 95       	ret

000003e6 <BUTTON_init>:
 */ 
#include "button.h"
EN_buttonError_t BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
	EN_buttonError_t error = BUTTON_OK;
	if(buttonPort>PORT_D)
 3e6:	85 34       	cpi	r24, 0x45	; 69
 3e8:	38 f4       	brcc	.+14     	; 0x3f8 <BUTTON_init+0x12>
	{
		error=WRONG_PORT_BUTTON;
	}else if (buttonPin>7)
 3ea:	68 30       	cpi	r22, 0x08	; 8
 3ec:	38 f4       	brcc	.+14     	; 0x3fc <BUTTON_init+0x16>
	{
		error=WRONG_PIN_BUTTON;
	}else
	{
DIO_init(buttonPort,buttonPin,INPUT);
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	0e 94 33 02 	call	0x466	; 0x466 <DIO_init>
error = BUTTON_OK;
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	08 95       	ret
EN_buttonError_t BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
	EN_buttonError_t error = BUTTON_OK;
	if(buttonPort>PORT_D)
	{
		error=WRONG_PORT_BUTTON;
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	08 95       	ret
	}else if (buttonPin>7)
	{
		error=WRONG_PIN_BUTTON;
 3fc:	82 e0       	ldi	r24, 0x02	; 2
	{
DIO_init(buttonPort,buttonPin,INPUT);
error = BUTTON_OK;
	}
	return error;
}
 3fe:	08 95       	ret

00000400 <BUTTON_read>:

EN_buttonError_t BUTTON_read(uint8_t buttonPort, uint8_t buttonPin, uint8_t *buttonState)
{
	EN_buttonError_t error = BUTTON_OK;
	if(buttonPort>PORT_D)
 400:	85 34       	cpi	r24, 0x45	; 69
 402:	20 f4       	brcc	.+8      	; 0x40c <BUTTON_read+0xc>
	{
		error=WRONG_PORT_BUTTON;
	}else if (buttonPin>7)
 404:	68 30       	cpi	r22, 0x08	; 8
 406:	10 f4       	brcc	.+4      	; 0x40c <BUTTON_read+0xc>
	{
		error=WRONG_PIN_BUTTON;
	}else
	{
		DIO_read(buttonPort,buttonPin,buttonState);
 408:	0e 94 49 03 	call	0x692	; 0x692 <DIO_read>
	error = BUTTON_OK;
	}
}
 40c:	08 95       	ret

0000040e <LED_init>:

#include "LED.h"
EN_ledError_t LED_init(uint8_t ledPort,uint8_t ledPin)
{
	EN_ledError_t error = LED_OK;
	if (ledPort > PORT_D)
 40e:	85 34       	cpi	r24, 0x45	; 69
 410:	38 f4       	brcc	.+14     	; 0x420 <LED_init+0x12>
	{
		error = WRONG_PORT_LED;
	}
	else if (ledPin > 7)
 412:	68 30       	cpi	r22, 0x08	; 8
 414:	38 f4       	brcc	.+14     	; 0x424 <LED_init+0x16>
	{
		error = WRONG_PIN_LED;
	}
	else
	{
		DIO_init(ledPort, ledPin, OUTPUT);
 416:	41 e0       	ldi	r20, 0x01	; 1
 418:	0e 94 33 02 	call	0x466	; 0x466 <DIO_init>
		error = LED_OK;
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	08 95       	ret
EN_ledError_t LED_init(uint8_t ledPort,uint8_t ledPin)
{
	EN_ledError_t error = LED_OK;
	if (ledPort > PORT_D)
	{
		error = WRONG_PORT_LED;
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	08 95       	ret
	}
	else if (ledPin > 7)
	{
		error = WRONG_PIN_LED;
 424:	82 e0       	ldi	r24, 0x02	; 2
		DIO_init(ledPort, ledPin, OUTPUT);
		error = LED_OK;
	}
	
	return error;
}
 426:	08 95       	ret

00000428 <LED_on>:

EN_ledError_t LED_on(uint8_t ledPort,uint8_t ledPin)
{
EN_ledError_t error = LED_OK;
if (ledPort > PORT_D)
 428:	85 34       	cpi	r24, 0x45	; 69
 42a:	38 f4       	brcc	.+14     	; 0x43a <LED_on+0x12>
{
	error = WRONG_PORT_LED;
}
else if (ledPin > 7)
 42c:	68 30       	cpi	r22, 0x08	; 8
 42e:	38 f4       	brcc	.+14     	; 0x43e <LED_on+0x16>
{
	error = WRONG_PIN_LED;
}
else
{
	DIO_write(ledPort,ledPin,HIGH);
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	0e 94 be 02 	call	0x57c	; 0x57c <DIO_write>
	error = LED_OK;
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	08 95       	ret
EN_ledError_t LED_on(uint8_t ledPort,uint8_t ledPin)
{
EN_ledError_t error = LED_OK;
if (ledPort > PORT_D)
{
	error = WRONG_PORT_LED;
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	08 95       	ret
}
else if (ledPin > 7)
{
	error = WRONG_PIN_LED;
 43e:	82 e0       	ldi	r24, 0x02	; 2
	DIO_write(ledPort,ledPin,HIGH);
	error = LED_OK;
}

return error;
}
 440:	08 95       	ret

00000442 <LED_off>:

EN_ledError_t LED_off(uint8_t ledPort,uint8_t ledPin)
{
EN_ledError_t error = LED_OK;
if (ledPort > PORT_D)
 442:	85 34       	cpi	r24, 0x45	; 69
 444:	38 f4       	brcc	.+14     	; 0x454 <LED_off+0x12>
{
	error = WRONG_PORT_LED;
}
else if (ledPin > 7)
 446:	68 30       	cpi	r22, 0x08	; 8
 448:	38 f4       	brcc	.+14     	; 0x458 <LED_off+0x16>
{
	error = WRONG_PIN_LED;
}
else
{
	DIO_write(ledPort,ledPin,LOW);
 44a:	40 e0       	ldi	r20, 0x00	; 0
 44c:	0e 94 be 02 	call	0x57c	; 0x57c <DIO_write>
	error = LED_OK;
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	08 95       	ret
EN_ledError_t LED_off(uint8_t ledPort,uint8_t ledPin)
{
EN_ledError_t error = LED_OK;
if (ledPort > PORT_D)
{
	error = WRONG_PORT_LED;
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	08 95       	ret
}
else if (ledPin > 7)
{
	error = WRONG_PIN_LED;
 458:	82 e0       	ldi	r24, 0x02	; 2
	DIO_write(ledPort,ledPin,LOW);
	error = LED_OK;
}

return error;
}
 45a:	08 95       	ret

0000045c <main>:

#include "APPLICATION/APP.h"
int main(void)
{
	/* Replace with your application code */
	APP_initModules();
 45c:	0e 94 8d 00 	call	0x11a	; 0x11a <APP_initModules>
	APP_ledSequenceV_3();
 460:	0e 94 82 01 	call	0x304	; 0x304 <APP_ledSequenceV_3>
 464:	ff cf       	rjmp	.-2      	; 0x464 <main+0x8>

00000466 <DIO_init>:
		{
			error = WRONG_PIN_NUMBER;
		}
		return error;
	}
}
 466:	68 30       	cpi	r22, 0x08	; 8
 468:	08 f0       	brcs	.+2      	; 0x46c <DIO_init+0x6>
 46a:	80 c0       	rjmp	.+256    	; 0x56c <DIO_init+0x106>
 46c:	44 23       	and	r20, r20
 46e:	21 f0       	breq	.+8      	; 0x478 <DIO_init+0x12>
 470:	41 30       	cpi	r20, 0x01	; 1
 472:	09 f4       	brne	.+2      	; 0x476 <DIO_init+0x10>
 474:	40 c0       	rjmp	.+128    	; 0x4f6 <DIO_init+0x90>
 476:	7c c0       	rjmp	.+248    	; 0x570 <DIO_init+0x10a>
 478:	82 34       	cpi	r24, 0x42	; 66
 47a:	b1 f0       	breq	.+44     	; 0x4a8 <DIO_init+0x42>
 47c:	18 f4       	brcc	.+6      	; 0x484 <DIO_init+0x1e>
 47e:	81 34       	cpi	r24, 0x41	; 65
 480:	31 f0       	breq	.+12     	; 0x48e <DIO_init+0x28>
 482:	78 c0       	rjmp	.+240    	; 0x574 <DIO_init+0x10e>
 484:	83 34       	cpi	r24, 0x43	; 67
 486:	e9 f0       	breq	.+58     	; 0x4c2 <DIO_init+0x5c>
 488:	84 34       	cpi	r24, 0x44	; 68
 48a:	41 f1       	breq	.+80     	; 0x4dc <DIO_init+0x76>
 48c:	73 c0       	rjmp	.+230    	; 0x574 <DIO_init+0x10e>
 48e:	2a b3       	in	r18, 0x1a	; 26
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <DIO_init+0x34>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <DIO_init+0x30>
 49e:	80 95       	com	r24
 4a0:	82 23       	and	r24, r18
 4a2:	8a bb       	out	0x1a, r24	; 26
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	08 95       	ret
 4a8:	27 b3       	in	r18, 0x17	; 23
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_init+0x4e>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_init+0x4a>
 4b8:	80 95       	com	r24
 4ba:	82 23       	and	r24, r18
 4bc:	87 bb       	out	0x17, r24	; 23
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	08 95       	ret
 4c2:	24 b3       	in	r18, 0x14	; 20
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_init+0x68>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_init+0x64>
 4d2:	80 95       	com	r24
 4d4:	82 23       	and	r24, r18
 4d6:	84 bb       	out	0x14, r24	; 20
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	08 95       	ret
 4dc:	21 b3       	in	r18, 0x11	; 17
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <DIO_init+0x82>
 4e4:	88 0f       	add	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	6a 95       	dec	r22
 4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <DIO_init+0x7e>
 4ec:	80 95       	com	r24
 4ee:	82 23       	and	r24, r18
 4f0:	81 bb       	out	0x11, r24	; 17
 4f2:	80 e0       	ldi	r24, 0x00	; 0
 4f4:	08 95       	ret
 4f6:	82 34       	cpi	r24, 0x42	; 66
 4f8:	a9 f0       	breq	.+42     	; 0x524 <DIO_init+0xbe>
 4fa:	18 f4       	brcc	.+6      	; 0x502 <DIO_init+0x9c>
 4fc:	81 34       	cpi	r24, 0x41	; 65
 4fe:	31 f0       	breq	.+12     	; 0x50c <DIO_init+0xa6>
 500:	3b c0       	rjmp	.+118    	; 0x578 <DIO_init+0x112>
 502:	83 34       	cpi	r24, 0x43	; 67
 504:	d9 f0       	breq	.+54     	; 0x53c <DIO_init+0xd6>
 506:	84 34       	cpi	r24, 0x44	; 68
 508:	29 f1       	breq	.+74     	; 0x554 <DIO_init+0xee>
 50a:	36 c0       	rjmp	.+108    	; 0x578 <DIO_init+0x112>
 50c:	2a b3       	in	r18, 0x1a	; 26
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_init+0xb2>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	6a 95       	dec	r22
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_init+0xae>
 51c:	82 2b       	or	r24, r18
 51e:	8a bb       	out	0x1a, r24	; 26
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	08 95       	ret
 524:	27 b3       	in	r18, 0x17	; 23
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_init+0xca>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	6a 95       	dec	r22
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_init+0xc6>
 534:	82 2b       	or	r24, r18
 536:	87 bb       	out	0x17, r24	; 23
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	08 95       	ret
 53c:	24 b3       	in	r18, 0x14	; 20
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_init+0xe2>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	6a 95       	dec	r22
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_init+0xde>
 54c:	82 2b       	or	r24, r18
 54e:	84 bb       	out	0x14, r24	; 20
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	08 95       	ret
 554:	21 b3       	in	r18, 0x11	; 17
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_init+0xfa>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	6a 95       	dec	r22
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_init+0xf6>
 564:	82 2b       	or	r24, r18
 566:	81 bb       	out	0x11, r24	; 17
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	08 95       	ret
 56c:	82 e0       	ldi	r24, 0x02	; 2
 56e:	08 95       	ret
 570:	83 e0       	ldi	r24, 0x03	; 3
 572:	08 95       	ret
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	08 95       	ret
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	08 95       	ret

0000057c <DIO_write>:
 57c:	68 30       	cpi	r22, 0x08	; 8
 57e:	08 f0       	brcs	.+2      	; 0x582 <DIO_write+0x6>
 580:	80 c0       	rjmp	.+256    	; 0x682 <DIO_write+0x106>
 582:	44 23       	and	r20, r20
 584:	21 f0       	breq	.+8      	; 0x58e <DIO_write+0x12>
 586:	41 30       	cpi	r20, 0x01	; 1
 588:	09 f4       	brne	.+2      	; 0x58c <DIO_write+0x10>
 58a:	40 c0       	rjmp	.+128    	; 0x60c <DIO_write+0x90>
 58c:	7c c0       	rjmp	.+248    	; 0x686 <DIO_write+0x10a>
 58e:	82 34       	cpi	r24, 0x42	; 66
 590:	b1 f0       	breq	.+44     	; 0x5be <DIO_write+0x42>
 592:	18 f4       	brcc	.+6      	; 0x59a <DIO_write+0x1e>
 594:	81 34       	cpi	r24, 0x41	; 65
 596:	31 f0       	breq	.+12     	; 0x5a4 <DIO_write+0x28>
 598:	78 c0       	rjmp	.+240    	; 0x68a <DIO_write+0x10e>
 59a:	83 34       	cpi	r24, 0x43	; 67
 59c:	e9 f0       	breq	.+58     	; 0x5d8 <DIO_write+0x5c>
 59e:	84 34       	cpi	r24, 0x44	; 68
 5a0:	41 f1       	breq	.+80     	; 0x5f2 <DIO_write+0x76>
 5a2:	73 c0       	rjmp	.+230    	; 0x68a <DIO_write+0x10e>
 5a4:	2b b3       	in	r18, 0x1b	; 27
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <DIO_write+0x34>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <DIO_write+0x30>
 5b4:	80 95       	com	r24
 5b6:	82 23       	and	r24, r18
 5b8:	8b bb       	out	0x1b, r24	; 27
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	08 95       	ret
 5be:	28 b3       	in	r18, 0x18	; 24
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_write+0x4e>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	6a 95       	dec	r22
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_write+0x4a>
 5ce:	80 95       	com	r24
 5d0:	82 23       	and	r24, r18
 5d2:	88 bb       	out	0x18, r24	; 24
 5d4:	80 e0       	ldi	r24, 0x00	; 0
 5d6:	08 95       	ret
 5d8:	25 b3       	in	r18, 0x15	; 21
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_write+0x68>
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	6a 95       	dec	r22
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_write+0x64>
 5e8:	80 95       	com	r24
 5ea:	82 23       	and	r24, r18
 5ec:	85 bb       	out	0x15, r24	; 21
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	08 95       	ret
 5f2:	22 b3       	in	r18, 0x12	; 18
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_write+0x82>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	6a 95       	dec	r22
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_write+0x7e>
 602:	80 95       	com	r24
 604:	82 23       	and	r24, r18
 606:	82 bb       	out	0x12, r24	; 18
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	08 95       	ret
 60c:	82 34       	cpi	r24, 0x42	; 66
 60e:	a9 f0       	breq	.+42     	; 0x63a <DIO_write+0xbe>
 610:	18 f4       	brcc	.+6      	; 0x618 <DIO_write+0x9c>
 612:	81 34       	cpi	r24, 0x41	; 65
 614:	31 f0       	breq	.+12     	; 0x622 <DIO_write+0xa6>
 616:	3b c0       	rjmp	.+118    	; 0x68e <DIO_write+0x112>
 618:	83 34       	cpi	r24, 0x43	; 67
 61a:	d9 f0       	breq	.+54     	; 0x652 <DIO_write+0xd6>
 61c:	84 34       	cpi	r24, 0x44	; 68
 61e:	29 f1       	breq	.+74     	; 0x66a <DIO_write+0xee>
 620:	36 c0       	rjmp	.+108    	; 0x68e <DIO_write+0x112>
 622:	2b b3       	in	r18, 0x1b	; 27
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <DIO_write+0xb2>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	6a 95       	dec	r22
 630:	e2 f7       	brpl	.-8      	; 0x62a <DIO_write+0xae>
 632:	82 2b       	or	r24, r18
 634:	8b bb       	out	0x1b, r24	; 27
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	08 95       	ret
 63a:	2b b3       	in	r18, 0x1b	; 27
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_write+0xca>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	6a 95       	dec	r22
 648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_write+0xc6>
 64a:	82 2b       	or	r24, r18
 64c:	8b bb       	out	0x1b, r24	; 27
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	08 95       	ret
 652:	2b b3       	in	r18, 0x1b	; 27
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_write+0xe2>
 65a:	88 0f       	add	r24, r24
 65c:	99 1f       	adc	r25, r25
 65e:	6a 95       	dec	r22
 660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_write+0xde>
 662:	82 2b       	or	r24, r18
 664:	8b bb       	out	0x1b, r24	; 27
 666:	80 e0       	ldi	r24, 0x00	; 0
 668:	08 95       	ret
 66a:	2b b3       	in	r18, 0x1b	; 27
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_write+0xfa>
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	6a 95       	dec	r22
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_write+0xf6>
 67a:	82 2b       	or	r24, r18
 67c:	8b bb       	out	0x1b, r24	; 27
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	08 95       	ret
 682:	82 e0       	ldi	r24, 0x02	; 2
 684:	08 95       	ret
 686:	84 e0       	ldi	r24, 0x04	; 4
 688:	08 95       	ret
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	08 95       	ret
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	08 95       	ret

00000692 <DIO_read>:
						
EN_dioError_t DIO_read(uint8_t portNumber, uint8_t pinNumber, uint8_t *value)
{
	
	EN_dioError_t error = DIO_OK;
	if (pinNumber < 8)
 692:	68 30       	cpi	r22, 0x08	; 8
 694:	d8 f5       	brcc	.+118    	; 0x70c <DIO_read+0x7a>
	{

		switch(portNumber)
 696:	82 34       	cpi	r24, 0x42	; 66
 698:	a9 f0       	breq	.+42     	; 0x6c4 <DIO_read+0x32>
 69a:	18 f4       	brcc	.+6      	; 0x6a2 <DIO_read+0x10>
 69c:	81 34       	cpi	r24, 0x41	; 65
 69e:	31 f0       	breq	.+12     	; 0x6ac <DIO_read+0x1a>
 6a0:	37 c0       	rjmp	.+110    	; 0x710 <DIO_read+0x7e>
 6a2:	83 34       	cpi	r24, 0x43	; 67
 6a4:	d9 f0       	breq	.+54     	; 0x6dc <DIO_read+0x4a>
 6a6:	84 34       	cpi	r24, 0x44	; 68
 6a8:	29 f1       	breq	.+74     	; 0x6f4 <DIO_read+0x62>
 6aa:	32 c0       	rjmp	.+100    	; 0x710 <DIO_read+0x7e>
		{
			case PORT_A:	*value = GET_BIT(PINA,pinNumber);		break;
 6ac:	89 b3       	in	r24, 0x19	; 25
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <DIO_read+0x24>
 6b2:	95 95       	asr	r25
 6b4:	87 95       	ror	r24
 6b6:	6a 95       	dec	r22
 6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <DIO_read+0x20>
 6ba:	81 70       	andi	r24, 0x01	; 1
 6bc:	fa 01       	movw	r30, r20
 6be:	80 83       	st	Z, r24
}
						
EN_dioError_t DIO_read(uint8_t portNumber, uint8_t pinNumber, uint8_t *value)
{
	
	EN_dioError_t error = DIO_OK;
 6c0:	80 e0       	ldi	r24, 0x00	; 0
	if (pinNumber < 8)
	{

		switch(portNumber)
		{
			case PORT_A:	*value = GET_BIT(PINA,pinNumber);		break;
 6c2:	08 95       	ret
			case PORT_B:	*value = GET_BIT(PINB,pinNumber);		break;
 6c4:	86 b3       	in	r24, 0x16	; 22
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <DIO_read+0x3c>
 6ca:	95 95       	asr	r25
 6cc:	87 95       	ror	r24
 6ce:	6a 95       	dec	r22
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <DIO_read+0x38>
 6d2:	81 70       	andi	r24, 0x01	; 1
 6d4:	fa 01       	movw	r30, r20
 6d6:	80 83       	st	Z, r24
}
						
EN_dioError_t DIO_read(uint8_t portNumber, uint8_t pinNumber, uint8_t *value)
{
	
	EN_dioError_t error = DIO_OK;
 6d8:	80 e0       	ldi	r24, 0x00	; 0
	{

		switch(portNumber)
		{
			case PORT_A:	*value = GET_BIT(PINA,pinNumber);		break;
			case PORT_B:	*value = GET_BIT(PINB,pinNumber);		break;
 6da:	08 95       	ret
			case PORT_C:	*value = GET_BIT(PINC,pinNumber);		break;
 6dc:	83 b3       	in	r24, 0x13	; 19
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_read+0x54>
 6e2:	95 95       	asr	r25
 6e4:	87 95       	ror	r24
 6e6:	6a 95       	dec	r22
 6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_read+0x50>
 6ea:	81 70       	andi	r24, 0x01	; 1
 6ec:	fa 01       	movw	r30, r20
 6ee:	80 83       	st	Z, r24
}
						
EN_dioError_t DIO_read(uint8_t portNumber, uint8_t pinNumber, uint8_t *value)
{
	
	EN_dioError_t error = DIO_OK;
 6f0:	80 e0       	ldi	r24, 0x00	; 0

		switch(portNumber)
		{
			case PORT_A:	*value = GET_BIT(PINA,pinNumber);		break;
			case PORT_B:	*value = GET_BIT(PINB,pinNumber);		break;
			case PORT_C:	*value = GET_BIT(PINC,pinNumber);		break;
 6f2:	08 95       	ret
			case PORT_D:	*value = GET_BIT(PIND,pinNumber);		break;
 6f4:	80 b3       	in	r24, 0x10	; 16
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <DIO_read+0x6c>
 6fa:	95 95       	asr	r25
 6fc:	87 95       	ror	r24
 6fe:	6a 95       	dec	r22
 700:	e2 f7       	brpl	.-8      	; 0x6fa <DIO_read+0x68>
 702:	81 70       	andi	r24, 0x01	; 1
 704:	fa 01       	movw	r30, r20
 706:	80 83       	st	Z, r24
}
						
EN_dioError_t DIO_read(uint8_t portNumber, uint8_t pinNumber, uint8_t *value)
{
	
	EN_dioError_t error = DIO_OK;
 708:	80 e0       	ldi	r24, 0x00	; 0
		switch(portNumber)
		{
			case PORT_A:	*value = GET_BIT(PINA,pinNumber);		break;
			case PORT_B:	*value = GET_BIT(PINB,pinNumber);		break;
			case PORT_C:	*value = GET_BIT(PINC,pinNumber);		break;
			case PORT_D:	*value = GET_BIT(PIND,pinNumber);		break;
 70a:	08 95       	ret
			default:		error = WRONG_PORT_NUMBER;				break;
		}
	}
	else
	{
		error = WRONG_PIN_NUMBER;
 70c:	82 e0       	ldi	r24, 0x02	; 2
 70e:	08 95       	ret
		{
			case PORT_A:	*value = GET_BIT(PINA,pinNumber);		break;
			case PORT_B:	*value = GET_BIT(PINB,pinNumber);		break;
			case PORT_C:	*value = GET_BIT(PINC,pinNumber);		break;
			case PORT_D:	*value = GET_BIT(PIND,pinNumber);		break;
			default:		error = WRONG_PORT_NUMBER;				break;
 710:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;
 712:	08 95       	ret

00000714 <EXTINT_Init>:

EN_extintError_t EXTINT_Init (uint8_t intNumber)
{
	EN_extintError_t error =EXTINT_OK;
	/* Step 1	->		Choose Sense Control */
	switch(intNumber)
 714:	86 30       	cpi	r24, 0x06	; 6
 716:	29 f0       	breq	.+10     	; 0x722 <EXTINT_Init+0xe>
 718:	87 30       	cpi	r24, 0x07	; 7
 71a:	59 f0       	breq	.+22     	; 0x732 <EXTINT_Init+0x1e>
 71c:	85 30       	cpi	r24, 0x05	; 5
 71e:	b1 f4       	brne	.+44     	; 0x74c <EXTINT_Init+0x38>
 720:	10 c0       	rjmp	.+32     	; 0x742 <EXTINT_Init+0x2e>
	{
		case INT0:
		#if			SENSE_CONTROL_0		==		LOW_LEVEL
		CLEAR_BIT(MCUCR,ISC00);
 722:	95 b7       	in	r25, 0x35	; 53
 724:	9e 7f       	andi	r25, 0xFE	; 254
 726:	95 bf       	out	0x35, r25	; 53
		CLEAR_BIT(MCUCR,ISC01);
 728:	95 b7       	in	r25, 0x35	; 53
 72a:	9d 7f       	andi	r25, 0xFD	; 253
 72c:	95 bf       	out	0x35, r25	; 53
void (*EXTINT_2_callBack) (void) = nullPtr;


EN_extintError_t EXTINT_Init (uint8_t intNumber)
{
	EN_extintError_t error =EXTINT_OK;
 72e:	90 e0       	ldi	r25, 0x00	; 0
		SET_BIT(MCUCR,ISC01);
		#elif		SENSE_CONTROL_0		==		RISING_EDGE
		SET_BIT(MCUCR,ISC00);
		SET_BIT(MCUCR,ISC01);
		#endif
		break;
 730:	0e c0       	rjmp	.+28     	; 0x74e <EXTINT_Init+0x3a>
		
		case INT1:
		#if			SENSE_CONTROL_1		==		LOW_LEVEL
		CLEAR_BIT(MCUCR,ISC10);
 732:	95 b7       	in	r25, 0x35	; 53
 734:	9b 7f       	andi	r25, 0xFB	; 251
 736:	95 bf       	out	0x35, r25	; 53
		CLEAR_BIT(MCUCR,ISC11);
 738:	95 b7       	in	r25, 0x35	; 53
 73a:	97 7f       	andi	r25, 0xF7	; 247
 73c:	95 bf       	out	0x35, r25	; 53
void (*EXTINT_2_callBack) (void) = nullPtr;


EN_extintError_t EXTINT_Init (uint8_t intNumber)
{
	EN_extintError_t error =EXTINT_OK;
 73e:	90 e0       	ldi	r25, 0x00	; 0
		SET_BIT(MCUCR,ISC11);
		#elif		SENSE_CONTROL_1		==		RISING_EDGE
		SET_BIT(MCUCR,ISC10);
		SET_BIT(MCUCR,ISC11);
		#endif
		break;
 740:	06 c0       	rjmp	.+12     	; 0x74e <EXTINT_Init+0x3a>
		
		case INT2:
		#if			SENSE_CONTROL_2		==		FALLING_EDGE
		CLEAR_BIT(MCUCR,ISC2);
 742:	95 b7       	in	r25, 0x35	; 53
 744:	9f 7b       	andi	r25, 0xBF	; 191
 746:	95 bf       	out	0x35, r25	; 53
void (*EXTINT_2_callBack) (void) = nullPtr;


EN_extintError_t EXTINT_Init (uint8_t intNumber)
{
	EN_extintError_t error =EXTINT_OK;
 748:	90 e0       	ldi	r25, 0x00	; 0
		#if			SENSE_CONTROL_2		==		FALLING_EDGE
		CLEAR_BIT(MCUCR,ISC2);
		#elif		SENSE_CONTROL_2		==		RISING_EDGE
		SET_BIT(MCUCSR,ISC2);
		#endif
		break;
 74a:	01 c0       	rjmp	.+2      	; 0x74e <EXTINT_Init+0x3a>
		
		default: error = WRONG_INT_NUMBER;
 74c:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}
	/* Step 2	->		Enable Peripheral Interrupt */
	switch(intNumber)
 74e:	86 30       	cpi	r24, 0x06	; 6
 750:	29 f0       	breq	.+10     	; 0x75c <EXTINT_Init+0x48>
 752:	87 30       	cpi	r24, 0x07	; 7
 754:	39 f0       	breq	.+14     	; 0x764 <EXTINT_Init+0x50>
 756:	85 30       	cpi	r24, 0x05	; 5
 758:	69 f4       	brne	.+26     	; 0x774 <EXTINT_Init+0x60>
 75a:	08 c0       	rjmp	.+16     	; 0x76c <EXTINT_Init+0x58>
	{
		case INT0:	
		SET_BIT(GICR,INT0);		
 75c:	8b b7       	in	r24, 0x3b	; 59
 75e:	80 64       	ori	r24, 0x40	; 64
 760:	8b bf       	out	0x3b, r24	; 59
		break;
 762:	09 c0       	rjmp	.+18     	; 0x776 <EXTINT_Init+0x62>
		case INT1:	
		SET_BIT(GICR,INT1);		
 764:	8b b7       	in	r24, 0x3b	; 59
 766:	80 68       	ori	r24, 0x80	; 128
 768:	8b bf       	out	0x3b, r24	; 59
		break;
 76a:	05 c0       	rjmp	.+10     	; 0x776 <EXTINT_Init+0x62>
		case INT2:	
		SET_BIT(GICR,INT2);		
 76c:	8b b7       	in	r24, 0x3b	; 59
 76e:	80 62       	ori	r24, 0x20	; 32
 770:	8b bf       	out	0x3b, r24	; 59
		break;
 772:	01 c0       	rjmp	.+2      	; 0x776 <EXTINT_Init+0x62>
		default:
		error = WRONG_INT_NUMBER;	
 774:	91 e0       	ldi	r25, 0x01	; 1
		break;
	}
	/* Step 3	->		Enable Global Interrupt */
    sei();	
 776:	78 94       	sei
	return error;
}
 778:	89 2f       	mov	r24, r25
 77a:	08 95       	ret

0000077c <EXTINT_setCallBackInt>:


void EXTINT_setCallBackInt (uint8_t intNumber, void (*funPtr) (void))
{
	if (funPtr != nullPtr)
 77c:	61 15       	cp	r22, r1
 77e:	71 05       	cpc	r23, r1
 780:	a1 f0       	breq	.+40     	; 0x7aa <EXTINT_setCallBackInt+0x2e>
	{
		
		if (intNumber == INT0)
 782:	86 30       	cpi	r24, 0x06	; 6
 784:	29 f4       	brne	.+10     	; 0x790 <EXTINT_setCallBackInt+0x14>
		{
			EXTINT_0_callBack = funPtr;
 786:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <EXTINT_0_callBack+0x1>
 78a:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <EXTINT_0_callBack>
 78e:	08 95       	ret
		}
		else if (intNumber == INT1)
 790:	87 30       	cpi	r24, 0x07	; 7
 792:	29 f4       	brne	.+10     	; 0x79e <EXTINT_setCallBackInt+0x22>
		{
			EXTINT_1_callBack = funPtr;
 794:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <EXTINT_1_callBack+0x1>
 798:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <EXTINT_1_callBack>
 79c:	08 95       	ret
		}
		else if (intNumber == INT2)
 79e:	85 30       	cpi	r24, 0x05	; 5
 7a0:	21 f4       	brne	.+8      	; 0x7aa <EXTINT_setCallBackInt+0x2e>
		{
			EXTINT_2_callBack = funPtr;
 7a2:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <EXTINT_2_callBack+0x1>
 7a6:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <EXTINT_2_callBack>
 7aa:	08 95       	ret

000007ac <__vector_1>:
	}
}


ISR(EXT_INT_0)
{
 7ac:	1f 92       	push	r1
 7ae:	0f 92       	push	r0
 7b0:	0f b6       	in	r0, 0x3f	; 63
 7b2:	0f 92       	push	r0
 7b4:	11 24       	eor	r1, r1
 7b6:	2f 93       	push	r18
 7b8:	3f 93       	push	r19
 7ba:	4f 93       	push	r20
 7bc:	5f 93       	push	r21
 7be:	6f 93       	push	r22
 7c0:	7f 93       	push	r23
 7c2:	8f 93       	push	r24
 7c4:	9f 93       	push	r25
 7c6:	af 93       	push	r26
 7c8:	bf 93       	push	r27
 7ca:	ef 93       	push	r30
 7cc:	ff 93       	push	r31
	if (EXTINT_0_callBack != nullPtr)
 7ce:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <EXTINT_0_callBack>
 7d2:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <EXTINT_0_callBack+0x1>
 7d6:	30 97       	sbiw	r30, 0x00	; 0
 7d8:	09 f0       	breq	.+2      	; 0x7dc <__vector_1+0x30>
	{
		EXTINT_0_callBack();
 7da:	09 95       	icall
	}
}
 7dc:	ff 91       	pop	r31
 7de:	ef 91       	pop	r30
 7e0:	bf 91       	pop	r27
 7e2:	af 91       	pop	r26
 7e4:	9f 91       	pop	r25
 7e6:	8f 91       	pop	r24
 7e8:	7f 91       	pop	r23
 7ea:	6f 91       	pop	r22
 7ec:	5f 91       	pop	r21
 7ee:	4f 91       	pop	r20
 7f0:	3f 91       	pop	r19
 7f2:	2f 91       	pop	r18
 7f4:	0f 90       	pop	r0
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	0f 90       	pop	r0
 7fa:	1f 90       	pop	r1
 7fc:	18 95       	reti

000007fe <__vector_2>:

ISR(EXT_INT_1)
{
 7fe:	1f 92       	push	r1
 800:	0f 92       	push	r0
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	0f 92       	push	r0
 806:	11 24       	eor	r1, r1
 808:	2f 93       	push	r18
 80a:	3f 93       	push	r19
 80c:	4f 93       	push	r20
 80e:	5f 93       	push	r21
 810:	6f 93       	push	r22
 812:	7f 93       	push	r23
 814:	8f 93       	push	r24
 816:	9f 93       	push	r25
 818:	af 93       	push	r26
 81a:	bf 93       	push	r27
 81c:	ef 93       	push	r30
 81e:	ff 93       	push	r31
	if (EXTINT_1_callBack != nullPtr)
 820:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <EXTINT_1_callBack>
 824:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <EXTINT_1_callBack+0x1>
 828:	30 97       	sbiw	r30, 0x00	; 0
 82a:	09 f0       	breq	.+2      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
	{
		EXTINT_1_callBack();
 82c:	09 95       	icall
	}
}
 82e:	ff 91       	pop	r31
 830:	ef 91       	pop	r30
 832:	bf 91       	pop	r27
 834:	af 91       	pop	r26
 836:	9f 91       	pop	r25
 838:	8f 91       	pop	r24
 83a:	7f 91       	pop	r23
 83c:	6f 91       	pop	r22
 83e:	5f 91       	pop	r21
 840:	4f 91       	pop	r20
 842:	3f 91       	pop	r19
 844:	2f 91       	pop	r18
 846:	0f 90       	pop	r0
 848:	0f be       	out	0x3f, r0	; 63
 84a:	0f 90       	pop	r0
 84c:	1f 90       	pop	r1
 84e:	18 95       	reti

00000850 <__vector_3>:

ISR(EXT_INT_2)
{
 850:	1f 92       	push	r1
 852:	0f 92       	push	r0
 854:	0f b6       	in	r0, 0x3f	; 63
 856:	0f 92       	push	r0
 858:	11 24       	eor	r1, r1
 85a:	2f 93       	push	r18
 85c:	3f 93       	push	r19
 85e:	4f 93       	push	r20
 860:	5f 93       	push	r21
 862:	6f 93       	push	r22
 864:	7f 93       	push	r23
 866:	8f 93       	push	r24
 868:	9f 93       	push	r25
 86a:	af 93       	push	r26
 86c:	bf 93       	push	r27
 86e:	ef 93       	push	r30
 870:	ff 93       	push	r31
	if (EXTINT_2_callBack != nullPtr)
 872:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <EXTINT_2_callBack>
 876:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <EXTINT_2_callBack+0x1>
 87a:	30 97       	sbiw	r30, 0x00	; 0
 87c:	09 f0       	breq	.+2      	; 0x880 <__stack+0x21>
	{
		EXTINT_2_callBack();
 87e:	09 95       	icall
	}
 880:	ff 91       	pop	r31
 882:	ef 91       	pop	r30
 884:	bf 91       	pop	r27
 886:	af 91       	pop	r26
 888:	9f 91       	pop	r25
 88a:	8f 91       	pop	r24
 88c:	7f 91       	pop	r23
 88e:	6f 91       	pop	r22
 890:	5f 91       	pop	r21
 892:	4f 91       	pop	r20
 894:	3f 91       	pop	r19
 896:	2f 91       	pop	r18
 898:	0f 90       	pop	r0
 89a:	0f be       	out	0x3f, r0	; 63
 89c:	0f 90       	pop	r0
 89e:	1f 90       	pop	r1
 8a0:	18 95       	reti

000008a2 <TIMER_init>:
	{
		error = WRONG_TIMER_USED;
	}
	return error;
	
}
 8a2:	81 11       	cpse	r24, r1
 8a4:	0c c0       	rjmp	.+24     	; 0x8be <TIMER_init+0x1c>
 8a6:	83 b7       	in	r24, 0x33	; 51
 8a8:	88 60       	ori	r24, 0x08	; 8
 8aa:	83 bf       	out	0x33, r24	; 51
 8ac:	83 b7       	in	r24, 0x33	; 51
 8ae:	8f 7b       	andi	r24, 0xBF	; 191
 8b0:	83 bf       	out	0x33, r24	; 51
 8b2:	89 b7       	in	r24, 0x39	; 57
 8b4:	82 60       	ori	r24, 0x02	; 2
 8b6:	89 bf       	out	0x39, r24	; 57
 8b8:	78 94       	sei
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	08 95       	ret
 8be:	81 30       	cpi	r24, 0x01	; 1
 8c0:	21 f0       	breq	.+8      	; 0x8ca <TIMER_init+0x28>
 8c2:	82 30       	cpi	r24, 0x02	; 2
 8c4:	21 f4       	brne	.+8      	; 0x8ce <TIMER_init+0x2c>
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	08 95       	ret
 8ca:	80 e0       	ldi	r24, 0x00	; 0
 8cc:	08 95       	ret
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	08 95       	ret

000008d2 <TIMER_setTime>:
 8d2:	8f 92       	push	r8
 8d4:	9f 92       	push	r9
 8d6:	af 92       	push	r10
 8d8:	bf 92       	push	r11
 8da:	cf 92       	push	r12
 8dc:	df 92       	push	r13
 8de:	ef 92       	push	r14
 8e0:	ff 92       	push	r15
 8e2:	cf 93       	push	r28
 8e4:	81 11       	cpse	r24, r1
 8e6:	3e c0       	rjmp	.+124    	; 0x964 <TIMER_setTime+0x92>
 8e8:	a8 ee       	ldi	r26, 0xE8	; 232
 8ea:	b3 e0       	ldi	r27, 0x03	; 3
 8ec:	9a 01       	movw	r18, r20
 8ee:	ab 01       	movw	r20, r22
 8f0:	0e 94 6d 05 	call	0xada	; 0xada <__muluhisi3>
 8f4:	6b 01       	movw	r12, r22
 8f6:	7c 01       	movw	r14, r24
 8f8:	68 94       	set
 8fa:	13 f8       	bld	r1, 3
 8fc:	f6 94       	lsr	r15
 8fe:	e7 94       	ror	r14
 900:	d7 94       	ror	r13
 902:	c7 94       	ror	r12
 904:	16 94       	lsr	r1
 906:	d1 f7       	brne	.-12     	; 0x8fc <TIMER_setTime+0x2a>
 908:	cf ef       	ldi	r28, 0xFF	; 255
 90a:	01 c0       	rjmp	.+2      	; 0x90e <TIMER_setTime+0x3c>
 90c:	c1 50       	subi	r28, 0x01	; 1
 90e:	8c 2f       	mov	r24, r28
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	a0 e0       	ldi	r26, 0x00	; 0
 914:	b0 e0       	ldi	r27, 0x00	; 0
 916:	c8 16       	cp	r12, r24
 918:	d9 06       	cpc	r13, r25
 91a:	ea 06       	cpc	r14, r26
 91c:	fb 06       	cpc	r15, r27
 91e:	b0 f3       	brcs	.-20     	; 0x90c <TIMER_setTime+0x3a>
 920:	01 c0       	rjmp	.+2      	; 0x924 <TIMER_setTime+0x52>
 922:	c1 50       	subi	r28, 0x01	; 1
 924:	8c 2e       	mov	r8, r28
 926:	91 2c       	mov	r9, r1
 928:	a1 2c       	mov	r10, r1
 92a:	b1 2c       	mov	r11, r1
 92c:	c7 01       	movw	r24, r14
 92e:	b6 01       	movw	r22, r12
 930:	a5 01       	movw	r20, r10
 932:	94 01       	movw	r18, r8
 934:	0e 94 45 05 	call	0xa8a	; 0xa8a <__udivmodsi4>
 938:	67 2b       	or	r22, r23
 93a:	68 2b       	or	r22, r24
 93c:	69 2b       	or	r22, r25
 93e:	89 f7       	brne	.-30     	; 0x922 <TIMER_setTime+0x50>
 940:	c7 01       	movw	r24, r14
 942:	b6 01       	movw	r22, r12
 944:	a5 01       	movw	r20, r10
 946:	94 01       	movw	r18, r8
 948:	0e 94 45 05 	call	0xa8a	; 0xa8a <__udivmodsi4>
 94c:	20 93 76 00 	sts	0x0076, r18	; 0x800076 <TIMER_0_numberOfCTCs>
 950:	30 93 77 00 	sts	0x0077, r19	; 0x800077 <TIMER_0_numberOfCTCs+0x1>
 954:	40 93 78 00 	sts	0x0078, r20	; 0x800078 <TIMER_0_numberOfCTCs+0x2>
 958:	50 93 79 00 	sts	0x0079, r21	; 0x800079 <TIMER_0_numberOfCTCs+0x3>
 95c:	c1 50       	subi	r28, 0x01	; 1
 95e:	cc bf       	out	0x3c, r28	; 60
 960:	80 e0       	ldi	r24, 0x00	; 0
 962:	09 c0       	rjmp	.+18     	; 0x976 <TIMER_setTime+0xa4>
 964:	81 30       	cpi	r24, 0x01	; 1
 966:	21 f0       	breq	.+8      	; 0x970 <TIMER_setTime+0x9e>
 968:	82 30       	cpi	r24, 0x02	; 2
 96a:	21 f4       	brne	.+8      	; 0x974 <TIMER_setTime+0xa2>
 96c:	80 e0       	ldi	r24, 0x00	; 0
 96e:	03 c0       	rjmp	.+6      	; 0x976 <TIMER_setTime+0xa4>
 970:	80 e0       	ldi	r24, 0x00	; 0
 972:	01 c0       	rjmp	.+2      	; 0x976 <TIMER_setTime+0xa4>
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	cf 91       	pop	r28
 978:	ff 90       	pop	r15
 97a:	ef 90       	pop	r14
 97c:	df 90       	pop	r13
 97e:	cf 90       	pop	r12
 980:	bf 90       	pop	r11
 982:	af 90       	pop	r10
 984:	9f 90       	pop	r9
 986:	8f 90       	pop	r8
 988:	08 95       	ret

0000098a <TIMER_start>:
 98a:	81 11       	cpse	r24, r1
 98c:	0b c0       	rjmp	.+22     	; 0x9a4 <TIMER_start+0x1a>
 98e:	83 b7       	in	r24, 0x33	; 51
 990:	84 60       	ori	r24, 0x04	; 4
 992:	83 bf       	out	0x33, r24	; 51
 994:	83 b7       	in	r24, 0x33	; 51
 996:	8d 7f       	andi	r24, 0xFD	; 253
 998:	83 bf       	out	0x33, r24	; 51
 99a:	83 b7       	in	r24, 0x33	; 51
 99c:	8e 7f       	andi	r24, 0xFE	; 254
 99e:	83 bf       	out	0x33, r24	; 51
 9a0:	80 e0       	ldi	r24, 0x00	; 0
 9a2:	08 95       	ret
 9a4:	81 30       	cpi	r24, 0x01	; 1
 9a6:	21 f0       	breq	.+8      	; 0x9b0 <TIMER_start+0x26>
 9a8:	82 30       	cpi	r24, 0x02	; 2
 9aa:	21 f4       	brne	.+8      	; 0x9b4 <TIMER_start+0x2a>
 9ac:	80 e0       	ldi	r24, 0x00	; 0
 9ae:	08 95       	ret
 9b0:	80 e0       	ldi	r24, 0x00	; 0
 9b2:	08 95       	ret
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	08 95       	ret

000009b8 <TIMER_setCallBack>:

void TIMER_setCallBack(uint8_t timerUsed, void (*funPtr)(void))
{
	if(funPtr != nullPtr)
 9b8:	61 15       	cp	r22, r1
 9ba:	71 05       	cpc	r23, r1
 9bc:	a1 f0       	breq	.+40     	; 0x9e6 <TIMER_setCallBack+0x2e>
	{
		if (timerUsed == TIMER_0)
 9be:	81 11       	cpse	r24, r1
 9c0:	05 c0       	rjmp	.+10     	; 0x9cc <TIMER_setCallBack+0x14>
		{
			TIMER_0_callBack = funPtr;
 9c2:	70 93 75 00 	sts	0x0075, r23	; 0x800075 <TIMER_0_callBack+0x1>
 9c6:	60 93 74 00 	sts	0x0074, r22	; 0x800074 <TIMER_0_callBack>
 9ca:	08 95       	ret
		}
		else if (timerUsed == TIMER_1)
 9cc:	81 30       	cpi	r24, 0x01	; 1
 9ce:	29 f4       	brne	.+10     	; 0x9da <TIMER_setCallBack+0x22>
		{
			TIMER_1_callBack = funPtr;
 9d0:	70 93 73 00 	sts	0x0073, r23	; 0x800073 <TIMER_1_callBack+0x1>
 9d4:	60 93 72 00 	sts	0x0072, r22	; 0x800072 <TIMER_1_callBack>
 9d8:	08 95       	ret
		}
		else if (timerUsed == TIMER_2)
 9da:	82 30       	cpi	r24, 0x02	; 2
 9dc:	21 f4       	brne	.+8      	; 0x9e6 <TIMER_setCallBack+0x2e>
		{
			TIMER_2_callBack = funPtr;
 9de:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <TIMER_2_callBack+0x1>
 9e2:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <TIMER_2_callBack>
 9e6:	08 95       	ret

000009e8 <__vector_10>:
	}
}

#elif TIMER_0_MODE==CTC_TIMER
ISR(TIMER0_COMP)
{
 9e8:	1f 92       	push	r1
 9ea:	0f 92       	push	r0
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	0f 92       	push	r0
 9f0:	11 24       	eor	r1, r1
 9f2:	2f 93       	push	r18
 9f4:	3f 93       	push	r19
 9f6:	4f 93       	push	r20
 9f8:	5f 93       	push	r21
 9fa:	6f 93       	push	r22
 9fc:	7f 93       	push	r23
 9fe:	8f 93       	push	r24
 a00:	9f 93       	push	r25
 a02:	af 93       	push	r26
 a04:	bf 93       	push	r27
 a06:	ef 93       	push	r30
 a08:	ff 93       	push	r31
	static uint32_t CTCCounter = 0;
	CTCCounter++;
 a0a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <CTCCounter.1658>
 a0e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <CTCCounter.1658+0x1>
 a12:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <CTCCounter.1658+0x2>
 a16:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <CTCCounter.1658+0x3>
 a1a:	01 96       	adiw	r24, 0x01	; 1
 a1c:	a1 1d       	adc	r26, r1
 a1e:	b1 1d       	adc	r27, r1
 a20:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <CTCCounter.1658>
 a24:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <CTCCounter.1658+0x1>
 a28:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <CTCCounter.1658+0x2>
 a2c:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <CTCCounter.1658+0x3>
	if (CTCCounter  == TIMER_0_numberOfCTCs)
 a30:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <TIMER_0_numberOfCTCs>
 a34:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <TIMER_0_numberOfCTCs+0x1>
 a38:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <TIMER_0_numberOfCTCs+0x2>
 a3c:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <TIMER_0_numberOfCTCs+0x3>
 a40:	84 17       	cp	r24, r20
 a42:	95 07       	cpc	r25, r21
 a44:	a6 07       	cpc	r26, r22
 a46:	b7 07       	cpc	r27, r23
 a48:	79 f4       	brne	.+30     	; 0xa68 <__vector_10+0x80>
	{
		if(TIMER_0_callBack != nullPtr)
 a4a:	e0 91 74 00 	lds	r30, 0x0074	; 0x800074 <TIMER_0_callBack>
 a4e:	f0 91 75 00 	lds	r31, 0x0075	; 0x800075 <TIMER_0_callBack+0x1>
 a52:	30 97       	sbiw	r30, 0x00	; 0
 a54:	09 f0       	breq	.+2      	; 0xa58 <__vector_10+0x70>
		{
			TIMER_0_callBack();
 a56:	09 95       	icall
		}
		CTCCounter  =	0;
 a58:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <CTCCounter.1658>
 a5c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <CTCCounter.1658+0x1>
 a60:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <CTCCounter.1658+0x2>
 a64:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <CTCCounter.1658+0x3>
	}
}
 a68:	ff 91       	pop	r31
 a6a:	ef 91       	pop	r30
 a6c:	bf 91       	pop	r27
 a6e:	af 91       	pop	r26
 a70:	9f 91       	pop	r25
 a72:	8f 91       	pop	r24
 a74:	7f 91       	pop	r23
 a76:	6f 91       	pop	r22
 a78:	5f 91       	pop	r21
 a7a:	4f 91       	pop	r20
 a7c:	3f 91       	pop	r19
 a7e:	2f 91       	pop	r18
 a80:	0f 90       	pop	r0
 a82:	0f be       	out	0x3f, r0	; 63
 a84:	0f 90       	pop	r0
 a86:	1f 90       	pop	r1
 a88:	18 95       	reti

00000a8a <__udivmodsi4>:
 a8a:	a1 e2       	ldi	r26, 0x21	; 33
 a8c:	1a 2e       	mov	r1, r26
 a8e:	aa 1b       	sub	r26, r26
 a90:	bb 1b       	sub	r27, r27
 a92:	fd 01       	movw	r30, r26
 a94:	0d c0       	rjmp	.+26     	; 0xab0 <__udivmodsi4_ep>

00000a96 <__udivmodsi4_loop>:
 a96:	aa 1f       	adc	r26, r26
 a98:	bb 1f       	adc	r27, r27
 a9a:	ee 1f       	adc	r30, r30
 a9c:	ff 1f       	adc	r31, r31
 a9e:	a2 17       	cp	r26, r18
 aa0:	b3 07       	cpc	r27, r19
 aa2:	e4 07       	cpc	r30, r20
 aa4:	f5 07       	cpc	r31, r21
 aa6:	20 f0       	brcs	.+8      	; 0xab0 <__udivmodsi4_ep>
 aa8:	a2 1b       	sub	r26, r18
 aaa:	b3 0b       	sbc	r27, r19
 aac:	e4 0b       	sbc	r30, r20
 aae:	f5 0b       	sbc	r31, r21

00000ab0 <__udivmodsi4_ep>:
 ab0:	66 1f       	adc	r22, r22
 ab2:	77 1f       	adc	r23, r23
 ab4:	88 1f       	adc	r24, r24
 ab6:	99 1f       	adc	r25, r25
 ab8:	1a 94       	dec	r1
 aba:	69 f7       	brne	.-38     	; 0xa96 <__udivmodsi4_loop>
 abc:	60 95       	com	r22
 abe:	70 95       	com	r23
 ac0:	80 95       	com	r24
 ac2:	90 95       	com	r25
 ac4:	9b 01       	movw	r18, r22
 ac6:	ac 01       	movw	r20, r24
 ac8:	bd 01       	movw	r22, r26
 aca:	cf 01       	movw	r24, r30
 acc:	08 95       	ret

00000ace <__tablejump2__>:
 ace:	ee 0f       	add	r30, r30
 ad0:	ff 1f       	adc	r31, r31
 ad2:	05 90       	lpm	r0, Z+
 ad4:	f4 91       	lpm	r31, Z
 ad6:	e0 2d       	mov	r30, r0
 ad8:	09 94       	ijmp

00000ada <__muluhisi3>:
 ada:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__umulhisi3>
 ade:	a5 9f       	mul	r26, r21
 ae0:	90 0d       	add	r25, r0
 ae2:	b4 9f       	mul	r27, r20
 ae4:	90 0d       	add	r25, r0
 ae6:	a4 9f       	mul	r26, r20
 ae8:	80 0d       	add	r24, r0
 aea:	91 1d       	adc	r25, r1
 aec:	11 24       	eor	r1, r1
 aee:	08 95       	ret

00000af0 <__umulhisi3>:
 af0:	a2 9f       	mul	r26, r18
 af2:	b0 01       	movw	r22, r0
 af4:	b3 9f       	mul	r27, r19
 af6:	c0 01       	movw	r24, r0
 af8:	a3 9f       	mul	r26, r19
 afa:	70 0d       	add	r23, r0
 afc:	81 1d       	adc	r24, r1
 afe:	11 24       	eor	r1, r1
 b00:	91 1d       	adc	r25, r1
 b02:	b2 9f       	mul	r27, r18
 b04:	70 0d       	add	r23, r0
 b06:	81 1d       	adc	r24, r1
 b08:	11 24       	eor	r1, r1
 b0a:	91 1d       	adc	r25, r1
 b0c:	08 95       	ret

00000b0e <_exit>:
 b0e:	f8 94       	cli

00000b10 <__stop_program>:
 b10:	ff cf       	rjmp	.-2      	; 0xb10 <__stop_program>
